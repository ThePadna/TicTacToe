{"version":3,"sources":["wrappers/CanvasCoordinates.js","wrappers/CanvasCoordinatesSelection.js","tasks/DrawCircleAnim.js","tasks/DrawCrossAnim.js","wrappers/CellState.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["CanvasCoordinates","x","y","Object","classCallCheck","this","CanvasCoordinatesSelection","coord1","coord2","coord","getX","getY","DrawCircleAnim","ctx","cc","radius","startAngle","endAngle","gainPerTick","curAngle","tick","bind","beginPath","arc","stroke","window","requestAnimationFrame","DrawCrossAnim","curGain","moveTo","lineTo","CellState","sel","num","selection","value","owner","val","err","includes","length","console","log","symbol","jumpSize","document","querySelector","getContext","getSelection","getCoord1","getCoord2","midX","midY","setValue","setOwner","Math","PI","Game","gridSize","difficulty","missPlay","size","gameState","turn","p1Symbol","random","aiTakeTurn","edgeCells","i","push","_this","setDisplayWhosTurn","canv","getElementById","MAX_WIDTH","width","MAX_HEIGHT","height","lineWidth","fillStyle","fillRect","pixelJumpSize","pixelCurVert","pixelCurHori","addEventListener","e","clicked","offsetX","offsetY","pixelVert","pixelHor","firstRun","topLeftX","topLeftY","bottomRightX","bottomRightY","contains","cs","getOwner","claim","aiClaims","playerClaims","checkForWinCondition","setTimeout","found","index","getIndex","top","bottom","right","left","isInBounds","isOnSameRow","topFarthest","bottomFarthest","topCS","findByIndex","bottomCS","topFarthestCS","bottomFarthestCS","claimEndAITurn","topReached","bottomReached","count","space","count1","isHittingEdge","leftFarthest","rightFarthest","leftCS","rightCS","leftFarthestCS","rightFarthestCS","leftReached","rightReached","scores","topLeft","topRight","bottomLeft","bottomRight","score","topLeftFarthest","bottomRightFarthest","topLeftFarthestCS","bottomRightFarthestCS","topLeftCS","bottomRightCS","currentHighest","topRightCS","bottomLeftCS","farthest","farthestCS","floor","emptyCell","setDisplayWhosWon","csList","farthestTop","farthestBottom","farthestBottomCS","farthestTopCS","farthestLeft","farthestRight","farthestLeftCS","farthestRightCS","farthestTopRight","farthestBottomLeft","farthestTopRightCS","farthestBottomLeftCS","farthestTopLeft","farthestBottomRight","farthestTopLeftCS","farthestBottomRightCS","i1","i2","foundEnd","i1NextRow","i1PrevRow","info","innerHTML","winner","statement","indexOf","strokeStyle","ccs","substr","App","props","possibleConstructorReturn","getPrototypeOf","call","gameInstance","state","inProgress","hideToggle","assertThisInitialized","backToMenu","selectBoxGrid","getElementsByTagName","selectBoxDifficulty","options","selectedIndex","parseInt","react_default","a","createElement","id","onClick","style","margin","innerText","color","draw","setState","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAwBeA,oBAtBX,SAAAA,EAAYC,EAAGC,GAAIC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACfK,KAAKJ,EAAIA,EACTI,KAAKH,EAAIA,qDAIT,OAAOG,KAAKJ,iCAIZ,OAAOI,KAAKH,+BAGXD,GACDI,KAAKJ,EAAIA,+BAGRC,GACDG,KAAKH,EAAIA,YCEFI,aAlBV,SAAAA,EAAYC,EAAQC,GAASL,OAAAC,EAAA,EAAAD,CAAAE,KAAAC,GACzBD,KAAKE,OAASA,EACdF,KAAKG,OAASA,0DAId,OAAOH,KAAKE,2CAIZ,OAAOF,KAAKG,wCAGPC,GACN,OAAQA,EAAMC,QAAUL,KAAKE,OAAOG,QAAUD,EAAMC,QAAUL,KAAKG,OAAOE,QAAUD,EAAME,QAAUN,KAAKE,OAAOI,QAAUF,EAAME,QAAUN,KAAKG,OAAOG,gBCQ/IC,aAtBX,SAAAA,EAAYC,EAAKC,EAAIC,EAAQC,EAAYC,EAAUC,GAAcf,OAAAC,EAAA,EAAAD,CAAAE,KAAAO,GAC7DP,KAAKQ,IAAMA,EACXR,KAAKS,GAAKA,EACVT,KAAKU,OAASA,EACdV,KAAKW,WAAaA,EAClBX,KAAKY,SAAWA,EAChBZ,KAAKa,YAAcA,EACnBb,KAAKc,SAAW,EAChBd,KAAKe,KAAOf,KAAKe,KAAKC,KAAKhB,yDAI3BA,KAAKc,UAAUd,KAAKa,YACpBb,KAAKQ,IAAIS,YACTjB,KAAKQ,IAAIU,IAAIlB,KAAKS,GAAGJ,OAAQL,KAAKS,GAAGH,OAAQN,KAAKU,OAAQV,KAAKW,WAAYX,KAAKc,UAChFd,KAAKQ,IAAIW,SACNnB,KAAKc,SAAWd,KAAKY,UACpBQ,OAAOC,sBAAsBrB,KAAKe,eCa/BO,0BA5BX,SAAAA,EAAYd,EAAKC,EAAII,EAAaH,GAASZ,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,GACvCtB,KAAKQ,IAAMA,EACXR,KAAKU,OAASA,EACdV,KAAKS,GAAKA,EACVT,KAAKa,YAAcA,EACnBb,KAAKuB,QAAU,EACfvB,KAAKe,KAAOf,KAAKe,KAAKC,KAAKhB,yDAI3BA,KAAKuB,SAAWvB,KAAKa,YACrBb,KAAKQ,IAAIS,YACT,IAAIrB,EAAII,KAAKS,GAAGJ,OAAQR,EAAIG,KAAKS,GAAGH,OACpCN,KAAKQ,IAAIgB,OAAO5B,EAAGC,GACnBG,KAAKQ,IAAIiB,OAAO7B,EAAII,KAAKuB,QAAS1B,EAAIG,KAAKuB,SAC3CvB,KAAKQ,IAAIgB,OAAO5B,EAAGC,GACnBG,KAAKQ,IAAIiB,OAAO7B,EAAII,KAAKuB,QAAS1B,EAAIG,KAAKuB,SAC3CvB,KAAKQ,IAAIgB,OAAO5B,EAAGC,GACnBG,KAAKQ,IAAIiB,OAAO7B,EAAII,KAAKuB,QAAS1B,EAAIG,KAAKuB,SAC3CvB,KAAKQ,IAAIgB,OAAO5B,EAAGC,GACnBG,KAAKQ,IAAIiB,OAAO7B,EAAII,KAAKuB,QAAS1B,EAAIG,KAAKuB,SAC3CvB,KAAKQ,IAAIW,SACNnB,KAAKuB,QAAUvB,KAAKU,QACnBU,OAAOC,sBAAsBrB,KAAKe,gBCyC/BW,aA9DX,SAAAA,EAAYC,EAAKC,GAAM9B,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,GACnB1B,KAAK6B,UAAYF,EACjB3B,KAAK8B,MAAQ,KACb9B,KAAK+B,MAAQ,KACb/B,KAAK4B,IAAMA,6DAIX,OAAO5B,KAAK6B,6CAIZ,OAAO7B,KAAK8B,yCAIZ,OAAO9B,KAAK4B,qCAGPI,GACL,IAAIC,EAAM,kEACLD,EAAIE,SAAS,MAASF,EAAIE,SAAS,KAG7BF,EAAIG,OAAS,GACpBC,QAAQC,IAAIJ,GACZjC,KAAK8B,MAAQ,MAEb9B,KAAK8B,MAAQE,GANbI,QAAQC,IAAIJ,GACZjC,KAAK8B,MAAQ,uCASZC,GAEQ,GAATA,GAAuB,GAATA,EAIlB/B,KAAK+B,MAAQA,EAHTK,QAAQC,IAFF,+GASV,OAAOrC,KAAK+B,oCAGVA,EAAOO,EAAQC,GACjB,IAAI/B,EAAMgC,SAASC,cAAc,eAAeC,WAAW,MACvDf,EAAM3B,KAAK2C,eACXzC,EAASyB,EAAIiB,YAAazC,EAASwB,EAAIkB,YACvCC,GAAS5C,EAAOG,OAASF,EAAOE,QAAU,EAAI0C,GAAS7C,EAAOI,OAASH,EAAOG,QAAU,EAC5E,MAAZgC,GACA,IAAIhB,EAAcd,EAAK,IAAIb,EAAkBmD,EAAMC,GAAO,IAAMR,EAAW,GAAIxB,OAC/Ef,KAAKgD,SAASV,GACdtC,KAAKiD,SAASlB,IACK,MAAZO,IACP,IAAI/B,EAAeC,EAAK,IAAIb,EAAkBmD,EAAMC,GAAQR,EAAW,EAAI,EAAa,EAAVW,KAAKC,GAAmB,EAAVD,KAAKC,GAAU,IAAIpC,OAC/Gf,KAAKgD,SAASV,GACdtC,KAAKiD,SAASlB,aCwgCXqB,oBA/jCX,SAAAA,EAAYC,EAAUC,GAElB,OAF+BxD,OAAAC,EAAA,EAAAD,CAAAE,KAAAoD,GAC/BpD,KAAKuD,SAAW,GACRD,GACJ,IAAK,OACDtD,KAAKuD,SAAW,GACpB,IAAK,SACDvD,KAAKuD,SAAW,GACpB,IAAK,OACDvD,KAAKuD,SAAW,GACpB,IAAK,aACDvD,KAAKuD,SAAW,EAExBvD,KAAKwD,KAAOH,EACZrD,KAAKuC,SAAW,KAChBvC,KAAKyD,UAAY,CAACJ,EAAWA,GAC7BrD,KAAK0D,KAAO,EACZ1D,KAAK2D,SAA4B,EAAhBT,KAAKU,SAAgB,EAAI,IAAM,IAChD5D,KAAK6D,WAAa7D,KAAK6D,WAAW7C,KAAKhB,MACvCA,KAAK8D,UAAY,GAEjB,IADA,IAAIlC,EAAM,EACDmC,EAAI,EAAGA,EAAI/D,KAAKwD,KAAMO,IAC3B/D,KAAK8D,UAAUE,KAAKpC,GACpBA,IAEJA,EAAM5B,KAAKwD,KAAO,EAClB,IAAK,IAAIO,EAAI,EAAGA,EAAI/D,KAAKwD,KAAMO,IAC3B/D,KAAK8D,UAAUE,KAAKpC,GACpBA,GAAO5B,KAAKwD,KAEhB5B,EAAM,EACN,IAAK,IAAImC,EAAI,EAAGA,EAAI/D,KAAKwD,KAAMO,IAC3B/D,KAAK8D,UAAUE,KAAKpC,GACpBA,IAEJA,EAAO5B,KAAKwD,KAAOxD,KAAKwD,KAAQxD,KAAKwD,KACrC,IAAK,IAAIO,EAAI,EAAGA,EAAI/D,KAAKwD,KAAMO,IAC3B/D,KAAK8D,UAAUE,KAAKpC,GACpBA,uDAID,IAAAqC,EAAAjE,KACHA,KAAKkE,mBAAmB,QACxB,IAAIC,EAAO3B,SAAS4B,eAAe,cACAC,EAAYF,EAAKG,MAAOC,EAAaJ,EAAKK,OACzEhE,EAAMgC,SAASC,cAAc,eAAeC,WAAW,MAC3DlC,EAAIiE,UAAa,GAAKzE,KAAKwD,KAC3BhD,EAAIkE,UAAY,QAChBlE,EAAImE,SAJY,EAAgB,EAIIN,EAAWE,GAC/C/D,EAAIkE,UAAY,QAChB,IAAIE,EAAiBP,EAAYrE,KAAKwD,KAAOqB,EAAe,EAAGC,EAAe,EAC9E9E,KAAKuC,SAAWqC,EAChBT,EAAKY,iBAAiB,QAAS,SAACC,GAAQf,EAAKgB,QAAQ,IAAItF,EAAkBqF,EAAEE,QAASF,EAAEG,SAAU3E,EAAKoE,KACvG,IAAK,IAAIb,EAAI,EAAGA,EAAI/D,KAAKwD,KAAMO,IAC3Be,GAAgBF,EAChBpE,EAAIgB,OAAOsD,EAAc,GACzBtE,EAAIiB,OAAOqD,EAAcP,GACzB/D,EAAIW,SAER,IAAK,IAAI4C,EAAI,EAAGA,EAAI/D,KAAKwD,KAAMO,IAC3Bc,GAAgBD,EAChBpE,EAAIgB,OAAO,EAAGqD,GACdrE,EAAIiB,OAAO4C,EAAWQ,GACtBrE,EAAIW,SAIR,IAFA,IAAIiE,EAAY,EAAGC,EAAW,EAC1BC,GAAW,EACNvB,EAAI,EAAGA,EAAI/D,KAAKwD,KAAOxD,KAAKwD,KAAMO,IAAK,CACxCuB,IACAD,GAAaT,EACbU,GAAW,GAEVF,EAAYR,EAAiBL,IAC9Ba,EAAY,EACZC,GAAaT,GAEjB,IAAIW,EAAYF,EAAWT,EAAgBY,EAAWJ,EAElDK,EAAeJ,EAAUK,EAD7BN,GAAaR,EAEb5E,KAAKyD,UAAUM,GAAK,IAAIrC,EAAU,IAAIzB,EAA2B,IAAIN,EAAkB4F,EAAUC,GAAW,IAAI7F,EAAkB8F,EAAcC,IAAgB3B,oCAIhKtD,EAAID,EAAK+B,GACb,GAAiB,GAAbvC,KAAK0D,KACT,IAAK,IAAIK,EAAI,EAAGA,EAAI/D,KAAKyD,UAAUtB,OAAQ4B,IAAK,CAE5C,GADU/D,KAAKyD,UAAUM,GAAGpB,eACpBgD,SAASlF,GAAK,CAClB,IAAImF,EAAK5F,KAAKyD,UAAUM,GACxB,GAAqB,MAAjB6B,EAAGC,WAAoB,OAC3BD,EAAGE,MAAM9F,KAAK0D,KAAM1D,KAAK2D,SAAUpB,GAGnC,IAFA,IAAIwD,EAAW,GAAIC,EAAe,GAEzBjC,EAAI,EAAGA,EAAI/D,KAAKyD,UAAUtB,OAAQ4B,IACF,IAAjC/D,KAAKyD,UAAUM,GAAG8B,YAClBE,EAAS/B,KAAKhE,KAAKyD,UAAUM,KACrB,GAC+B,GAAhC/D,KAAKyD,UAAUM,GAAG8B,YACzBG,EAAahC,KAAKhE,KAAKyD,UAAUM,IAGpC/D,KAAKiG,qBAAqBD,EAAcD,KACzC/F,KAAK0D,KAAO,EACZ1D,KAAKkE,mBAAmB,QACxBgC,WAAWlG,KAAK6D,WAAY,8CAaxC,IAJA,IAAIvB,EAA2B,MAAlBtC,KAAK2D,SAAmB,IAAM,IAEvCoC,GADM7C,KAAKU,SACA,IAAIoC,EAAe,GAC9BG,GAAQ,EACHpC,EAAI,EAAGA,EAAI/D,KAAKyD,UAAUtB,OAAQ4B,IACF,IAAjC/D,KAAKyD,UAAUM,GAAG8B,YAClBE,EAAS/B,KAAKhE,KAAKyD,UAAUM,IAC7BoC,GAAQ,GAC+B,GAAhCnG,KAAKyD,UAAUM,GAAG8B,YACzBG,EAAahC,KAAKhE,KAAKyD,UAAUM,IAGzC,GAAKoC,GAAsB,GAAbnG,KAAKwD,KAeZ,CACH,GAAIxD,KAAKwD,KAAO,EACZ,IAAK,IAAIO,EAAI,EAAGA,EAAIiC,EAAa7D,OAAQ4B,IAAK,CAE1C,IAAIqC,EAAQJ,EAAajC,GAAGsC,WACxBC,EAAOF,EAAQ,EAAIG,EAAUH,EAAQ,EAAII,EAASJ,EAAQpG,KAAKwD,KAAOiD,EAAQL,EAAQpG,KAAKwD,KAC/F,GAAIxD,KAAKwD,KAAO,EAAG,CACf,GAAIxD,KAAK0G,WAAWJ,IAAQtG,KAAK2G,YAAYP,EAAOE,IAAQtG,KAAK0G,WAAWH,IAAWvG,KAAK2G,YAAYP,EAAOG,GAAS,CACpH,IAAIK,EAAcN,EAAM,EAAGO,EAAiBN,EAAS,EACrD,GAAIvG,KAAK0G,WAAWE,IAAgB5G,KAAK2G,YAAYP,EAAOQ,IAAgB5G,KAAK0G,WAAWG,IAAmB7G,KAAK2G,YAAYE,EAAgBT,GAAQ,CACpJ,IAAIU,EAAQ9G,KAAK+G,YAAYT,GAAMU,EAAWhH,KAAK+G,YAAYR,GAASU,EAAgBjH,KAAK+G,YAAYH,GAAcM,EAAmBlH,KAAK+G,YAAYF,GAC3J,GAAwB,GAApBC,EAAMjB,YAA0C,GAAvBmB,EAASnB,YAA+C,GAA5BoB,EAAcpB,YAAkD,MAA/BqB,EAAiBrB,WAEvG,YADA7F,KAAKmH,eAAeD,EAAkB5E,EAAQ0D,EAAcD,GAGhE,GAAwB,GAApBe,EAAMjB,YAA0C,GAAvBmB,EAASnB,YAAkD,GAA/BqB,EAAiBrB,YAA+C,MAA5BoB,EAAcpB,WAEvG,YADA7F,KAAKmH,eAAeF,EAAe3E,EAAQ0D,EAAcD,GAG7D,GAA2B,GAAvBiB,EAASnB,YAA0C,GAAvBmB,EAASnB,YAAkD,GAA/BqB,EAAiBrB,YAAuC,MAApBiB,EAAMjB,WAElG,YADA7F,KAAKmH,eAAeL,EAAOxE,EAAQ0D,EAAcD,GAGrD,GAAwB,GAApBe,EAAMjB,YAA+C,GAA5BoB,EAAcpB,YAAkD,GAA/BqB,EAAiBrB,YAA0C,MAAvBmB,EAASnB,WAEvG,YADA7F,KAAKmH,eAAeH,EAAU1E,EAAQ0D,EAAcD,GAGxD,GAA2B,GAAvBiB,EAASnB,YAAkD,GAA/BqB,EAAiBrB,YAAuC,MAApBiB,EAAMjB,WAEtE,YADA7F,KAAKmH,eAAeL,EAAOxE,EAAQ0D,EAAcD,GAGrD,GAAwB,GAApBe,EAAMjB,YAA+C,GAA5BoB,EAAcpB,YAA0C,GAAvBmB,EAASnB,YAAkD,MAA/BqB,EAAiBrB,WAEvG,YADA7F,KAAKmH,eAAeD,EAAkB5E,EAAQ0D,EAAcD,GAGhE,GAAwB,GAApBe,EAAMjB,YAA0C,GAAvBmB,EAASnB,WAAiB,CAGnD,IAFA,IAAIuB,GAAa,EAAOC,GAAgB,EACpCC,EAAQ,GACJF,GAAY,CAEhB,IAAIG,EAAQX,IADZU,EAEKtH,KAAK0G,WAAWa,IAAWvH,KAAK2G,YAAYP,EAAOmB,KACpDH,GAAa,GAIrB,IADA,IAAII,EAAS,GACLH,GAAe,CAEnB,IAAIE,EAAQV,KADZW,EAEKxH,KAAK0G,WAAWa,IAAWvH,KAAK2G,YAAYP,EAAOmB,KACpDF,GAAgB,GAGxB,GAAIC,EAAQE,GAAsC,MAA5BP,EAAcpB,WAEhC,YADA7F,KAAKmH,eAAeF,EAAe3E,EAAQ0D,EAAcD,GAEtD,GAAIyB,EAASF,GAAwC,MAA/BJ,EAAiBrB,WAE1C,YADA7F,KAAKmH,eAAeD,EAAkB5E,EAAQ0D,EAAcD,GAG5D,IAAIH,EAAK,KAQT,GAAqB,OANjBA,EAD4B,MAA5BqB,EAAcpB,WACTqB,EACiC,MAA/BA,EAAiBrB,WACnBoB,EAEiB,EAAhB/D,KAAKU,SAAgB,EAAIqD,EAAgBC,GAE5CrB,WAEH,YADA7F,KAAKmH,eAAevB,EAAItD,EAAQ0D,EAAcD,KAOlE,GAAI/F,KAAK0G,WAAWD,IAASzG,KAAK0G,WAAWF,KAAWxG,KAAKyH,cAAcrB,KAAWpG,KAAKyH,cAAchB,KAAUzG,KAAKyH,cAAcjB,GAAQ,CAC1I,IAAIkB,EAAejB,EAAOzG,KAAKwD,KAAMmE,EAAgBnB,EAAQxG,KAAKwD,KAClE,GAAIxD,KAAK0G,WAAWgB,IAAiB1H,KAAK0G,WAAWiB,GAAgB,CACjE,IAAIC,EAAS5H,KAAK+G,YAAYN,GAAOoB,EAAU7H,KAAK+G,YAAYP,GAAQsB,EAAiB9H,KAAK+G,YAAYW,GAAeK,EAAkB/H,KAAK+G,YAAYY,GAC5J,GAAyB,GAArBC,EAAO/B,YAAyC,GAAtBgC,EAAQhC,YAAgD,GAA7BiC,EAAejC,YAAiD,MAA9BkC,EAAgBlC,WAEvG,YADA7F,KAAKmH,eAAeY,EAAiBzF,EAAQ0D,EAAcD,GAG/D,GAAyB,GAArB6B,EAAO/B,YAAyC,GAAtBgC,EAAQhC,YAAiD,GAA9BkC,EAAgBlC,YAAgD,MAA7BiC,EAAejC,WAEvG,YADA7F,KAAKmH,eAAeW,EAAgBxF,EAAQ0D,EAAcD,GAG9D,GAA0B,GAAtB8B,EAAQhC,YAAiD,GAA9BkC,EAAgBlC,YAAgD,GAA7BiC,EAAejC,YAAwC,MAArB+B,EAAO/B,WAEvG,YADA7F,KAAKmH,eAAeS,EAAQtF,EAAQ0D,EAAcD,GAGtD,GAAyB,GAArB6B,EAAO/B,YAAiD,GAA9BkC,EAAgBlC,YAAgD,GAA7BiC,EAAejC,YAAyC,MAAtBgC,EAAQhC,WAEvG,YADA7F,KAAKmH,eAAeU,EAASvF,EAAQ0D,EAAcD,GAGvD,GAAyB,GAArB6B,EAAO/B,YAAiD,GAA9BkC,EAAgBlC,YAAyC,MAAtBgC,EAAQhC,WAErE,YADA7F,KAAKmH,eAAeU,EAASvF,EAAQ0D,EAAcD,GAGvD,GAA0B,GAAtB8B,EAAQhC,YAAgD,GAA7BiC,EAAejC,YAAwC,GAArB+B,EAAO/B,WAEpE,YADA7F,KAAKmH,eAAeS,EAAQtF,EAAQ0D,EAAcD,GAGtD,GAAyB,GAArB6B,EAAO/B,YAAyC,GAAtBgC,EAAQhC,WAAiB,CAGnD,IAFA,IAAImC,GAAc,EAAOC,GAAe,EACpCX,EAAQ,GACJU,GAAa,CAEjB,IAAIT,EAAQG,GADZJ,GAAStH,KAAKwD,MAETxD,KAAK0G,WAAWa,IAAgD,GAAtCvH,KAAK+G,YAAYQ,GAAO1B,aACnDmC,GAAc,GAItB,IADA,IAAIR,EAAS,GACLS,GAAc,CAElB,IAAIV,EAAQI,GADZH,GAAUxH,KAAKwD,MAEVxD,KAAK0G,WAAWa,IAAgD,GAAtCvH,KAAK+G,YAAYQ,GAAO1B,aACnDoC,GAAe,GAGvB,GAAIX,EAAQE,GAAuC,MAA7BM,EAAejC,WAEjC,YADA7F,KAAKmH,eAAeW,EAAgBxF,EAAQ0D,EAAcD,GAEvD,GAAIyB,EAASF,GAAuC,MAA9BS,EAAgBlC,WAEzC,YADA7F,KAAKmH,eAAeY,EAAiBzF,EAAQ0D,EAAcD,GAG3D,IAAIH,EAAK,KAQT,GAAqB,OANjBA,EAD6B,MAA7BkC,EAAejC,WACViC,EACgC,MAA9BC,EAAgBlC,WAClBkC,EAEiB,EAAhB7E,KAAKU,SAAgB,EAAIkE,EAAiBC,GAE7ClC,WAEH,YADA7F,KAAKmH,eAAevB,EAAItD,EAAQ0D,EAAcD,OAY9E,IADA,IAAImC,EAAS,GACJnE,EAAI,EAAGA,EAAIgC,EAAS5D,OAAQ4B,IAAK,CACtC,IAAIqC,EAAQL,EAAShC,GAAGsC,WACpBC,EAAOF,EAAQ,EAAIG,EAAUH,EAAQ,EAAII,EAASJ,EAAQpG,KAAKwD,KAAOiD,EAAQL,EAAQpG,KAAKwD,KAAO2E,EAAW7B,EAAMtG,KAAKwD,KAAO4E,EAAY9B,EAAMtG,KAAKwD,KAAO6E,EAAc9B,EAASvG,KAAKwD,KAAO8E,EAAe/B,EAASvG,KAAKwD,KACjO,GAAIxD,KAAKwD,KAAO,EAAG,CACf,GAAIxD,KAAK0G,WAAWJ,IAAQtG,KAAK0G,WAAWH,IAAWvG,KAAK2G,YAAYP,EAAOE,IAAQtG,KAAK2G,YAAYP,EAAOG,GAAS,CACpH,IAAIK,EAAcN,EAAM,EAAGO,EAAiBN,EAAS,EACrD,GAAIvG,KAAK0G,WAAWE,IAAgB5G,KAAK0G,WAAWG,GAAiB,CACjE,IAAII,EAAgBjH,KAAK+G,YAAYH,GAAcM,EAAmBlH,KAAK+G,YAAYF,GAAiBC,EAAQ9G,KAAK+G,YAAYT,GAAMU,EAAWhH,KAAK+G,YAAYR,GAC/JgC,GAAQ,EAKZ,GAJgC,MAA5BtB,EAAcpB,aAAoB0C,IAAStB,EAAcpB,YAC1B,MAA/BqB,EAAiBrB,aAAoB0C,IAASrB,EAAiBrB,YAC3C,MAApBiB,EAAMjB,aAAoB0C,IAASzB,EAAMjB,YAClB,MAAvBmB,EAASnB,aAAoB0C,IAASvB,EAASnB,YACnB,GAA5BoB,EAAcpB,YAAuC,GAApBiB,EAAMjB,WACvC,GAA2B,GAAvBmB,EAASnB,YACT,GAAmC,MAA/BqB,EAAiBrB,WAAoB,CACrCqC,EAAOlE,KAAK,CAACuE,GAAOrB,IACpB,eAED,GAAmC,GAA/BA,EAAiBrB,YACxB,GAA2B,MAAvBmB,EAASnB,WAAoB,CAC7BqC,EAAOlE,KAAK,CAACuE,GAAOvB,IACpB,cAED,CACH,IAAIpB,GAAqB,EAAhB1C,KAAKU,SAAe,EAAIoD,EAAWE,EAC5C,GAAqB,MAAjBtB,GAAGC,WAAoB,CACvBqC,EAAOlE,KAAK,CAACuE,GAAO3C,KACpB,UAIZ,GAA2B,GAAvBoB,EAASnB,YAAkD,GAA/BqB,EAAiBrB,WAC7C,GAAwB,GAApBiB,EAAMjB,YACN,GAAgC,MAA5BoB,EAAcpB,WAAoB,CAClCqC,EAAOlE,KAAK,CAACuE,GAAOtB,IACpB,eAED,GAAgC,GAA5BA,EAAcpB,YACrB,GAAwB,MAApBiB,EAAMjB,WAAoB,CAC1BqC,EAAOlE,KAAK,CAACuE,GAAOzB,IACpB,cAED,CACH,IAAIlB,GAAqB,EAAhB1C,KAAKU,SAAe,EAAIkD,EAAQG,EACzC,GAAqB,MAAjBrB,GAAGC,WAAoB,CACvBqC,EAAOlE,KAAK,CAACuE,GAAO3C,KACpB,UAIZ,GAA2B,GAAvBoB,EAASnB,YAAuC,GAApBiB,EAAMjB,WAClC,GAAgC,GAA5BoB,EAAcpB,YACd,GAAmC,MAA/BqB,EAAiBrB,WAAoB,CACrCqC,EAAOlE,KAAK,CAACuE,GAAOrB,IACpB,eAED,GAAmC,GAA/BA,EAAiBrB,YACxB,GAAgC,MAA5BoB,EAAcpB,WAAoB,CAClCqC,EAAOlE,KAAK,CAACuE,GAAOtB,IACpB,cAED,CACH,IAAIrB,GAAqB,EAAhB1C,KAAKU,SAAe,EAAIsD,EAAmBD,EACpD,GAAqB,MAAjBrB,GAAGC,WAAoB,CACvBqC,EAAOlE,KAAK,CAACuE,GAAO3C,KACpB,UAIZ,GAAgC,GAA5BqB,EAAcpB,YAAkD,GAA/BqB,EAAiBrB,WAClD,GAAwB,GAApBiB,EAAMjB,YACN,GAA2B,MAAvBmB,EAASnB,WAAoB,CAC7BqC,EAAOlE,KAAK,CAACuE,GAAOvB,IACpB,eAED,GAA2B,GAAvBA,EAASnB,YAChB,GAAwB,MAApBiB,EAAMjB,WAAoB,CAC1BqC,EAAOlE,KAAK,CAACuE,GAAOzB,IACpB,cAED,CACH,IAAIlB,GAAqB,EAAhB1C,KAAKU,SAAe,EAAIkD,EAAQE,EACzC,GAAqB,MAAjBpB,GAAGC,WAAoB,CACvBqC,EAAOlE,KAAK,CAACuE,GAAO3C,KACpB,YAMpB,GAAI5F,KAAK0G,WAAWyB,IAAYnI,KAAK0G,WAAW4B,KAAiBtI,KAAKyH,cAAcrB,GAAQ,CACxF,IAAIoC,GAAmBL,EAAU,EAAKnI,KAAKwD,KAAMiF,GAAuBlC,EAAS,EAAKvG,KAAKwD,KAC3F,GAAIxD,KAAK0G,WAAW8B,KAAoBxI,KAAK0G,WAAW+B,MAAyBzI,KAAKyH,cAAcU,KAAanI,KAAKyH,cAAcW,GAAW,CAC3I,IAAIM,GAAoB1I,KAAK+G,YAAYyB,IAAkBG,GAAwB3I,KAAK+G,YAAY0B,IAAsBG,GAAY5I,KAAK+G,YAAYoB,GAAUU,GAAgB7I,KAAK+G,YAAYuB,GAC9LC,GAAQ,EAKZ,GAJoC,MAAhCG,GAAkB7C,aAAoB0C,IAASG,GAAkB7C,YAC7B,MAApC8C,GAAsB9C,aAAoB0C,IAASI,GAAsB9C,YACjD,MAAxB+C,GAAU/C,aAAoB0C,IAASK,GAAU/C,YACrB,MAA5BgD,GAAchD,aAAoB0C,IAASM,GAAchD,YACzB,GAAhC6C,GAAkB7C,YAA2C,GAAxB+C,GAAU/C,WAC/C,GAAgC,GAA5BgD,GAAchD,YACd,GAAwC,MAApC8C,GAAsB9C,WAAoB,CAC1CqC,EAAOlE,KAAK,CAACuE,GAAOI,KACpB,eAED,GAAwC,GAApCA,GAAsB9C,YAC7B,GAAgC,MAA5BgD,GAAchD,WAAoB,CAClCqC,EAAOlE,KAAK,CAACuE,GAAOM,KACpB,cAED,CACH,IAAIjD,GAAqB,EAAhB1C,KAAKU,SAAe,EAAIiF,GAAgBF,GACjD,GAAqB,MAAjB/C,GAAGC,WAAoB,CACvBqC,EAAOlE,KAAK,CAACuE,GAAO3C,KACpB,UAIZ,GAAgC,GAA5BiD,GAAchD,YAAuD,GAApC8C,GAAsB9C,WACvD,GAA4B,GAAxB+C,GAAU/C,YACV,GAAoC,MAAhC6C,GAAkB7C,WAAoB,CACtCqC,EAAOlE,KAAK,CAACuE,GAAOG,KACpB,eAED,GAAoC,GAAhCA,GAAkB7C,YACzB,GAA4B,MAAxB+C,GAAU/C,WAAoB,CAC9BqC,EAAOlE,KAAK,CAACuE,GAAOK,KACpB,cAED,CACH,IAAIhD,GAAqB,EAAhB1C,KAAKU,SAAe,EAAIgF,GAAYF,GAC7C,GAAqB,MAAjB9C,GAAGC,WAAoB,CACvBqC,EAAOlE,KAAK,CAACuE,GAAO3C,KACpB,UAIZ,GAAgC,GAA5BiD,GAAchD,YAA2C,GAAxB+C,GAAU/C,WAC3C,GAAoC,GAAhC6C,GAAkB7C,YAClB,GAAwC,MAApC8C,GAAsB9C,WAAoB,CAC1CqC,EAAOlE,KAAK,CAACuE,GAAOI,KACpB,eAED,GAAwC,GAApCA,GAAsB9C,YAC7B,GAAoC,MAAhC6C,GAAkB7C,WAAoB,CACtCqC,EAAOlE,KAAK,CAACuE,GAAOG,KACpB,cAED,CACH,IAAI9C,GAAqB,EAAhB1C,KAAKU,SAAe,EAAI+E,GAAwBD,GACzD,GAAqB,MAAjB9C,GAAGC,WAAoB,CACvBqC,EAAOlE,KAAK,CAACuE,GAAO3C,KACpB,UAIZ,GAAoC,GAAhC8C,GAAkB7C,YAAuD,GAApC8C,GAAsB9C,WAC3D,GAA4B,GAAxB+C,GAAU/C,YACV,GAAgC,MAA5BgD,GAAchD,WAAoB,CAClCqC,EAAOlE,KAAK,CAACuE,GAAOM,KACpB,eAED,GAAgC,GAA5BA,GAAchD,YACrB,GAA4B,MAAxB+C,GAAU/C,WAAoB,CAC9BqC,EAAOlE,KAAK,CAACuE,GAAOK,KACpB,cAED,CACH,IAAIhD,GAAqB,EAAhB1C,KAAKU,SAAe,EAAIgF,GAAYC,GAC7C,GAAqB,MAAjBjD,GAAGC,WAAoB,CACvBqC,EAAOlE,KAAK,CAACuE,GAAO3C,KACpB,aAOxB,GAAI5F,KAAK0G,WAAWD,IAASzG,KAAK0G,WAAWF,KAAWxG,KAAKyH,cAAcrB,GAAQ,CAC/E,IAAIsB,GAAejB,EAAOzG,KAAKwD,KAAMmE,GAAgBnB,EAAQxG,KAAKwD,KAClE,GAAIxD,KAAK0G,WAAWgB,KAAiB1H,KAAK0G,WAAWiB,MAAmB3H,KAAKyH,cAAchB,KAAUzG,KAAKyH,cAAcjB,GAAQ,CAC5H,IAAIsB,GAAiB9H,KAAK+G,YAAYW,IAAeK,GAAkB/H,KAAK+G,YAAYY,IAAgBC,GAAS5H,KAAK+G,YAAYN,GAAOoB,GAAU7H,KAAK+G,YAAYP,GAChK+B,GAAQ,EAKZ,GAJiC,MAA7BT,GAAejC,aAAoB0C,IAAST,GAAejC,YAC7B,MAA9BkC,GAAgBlC,aAAoB0C,IAASR,GAAgBlC,YACxC,MAArB+B,GAAO/B,aAAoB0C,IAASX,GAAO/B,YACrB,MAAtBgC,GAAQhC,aAAoB0C,IAASV,GAAQhC,YAChB,GAA7BiC,GAAejC,YAAwC,GAArB+B,GAAO/B,WACzC,GAA0B,GAAtBgC,GAAQhC,YACR,GAAkC,MAA9BkC,GAAgBlC,WAAoB,CACpCqC,EAAOlE,KAAK,CAACuE,GAAOR,KACpB,eAED,GAAkC,GAA9BA,GAAgBlC,YACvB,GAA0B,MAAtBgC,GAAQhC,WAAoB,CAC5BqC,EAAOlE,KAAK,CAACuE,GAAOV,KACpB,cAED,CACH,IAAIjC,GAAqB,EAAhB1C,KAAKU,SAAe,EAAIiE,GAAUE,GAC3C,GAAqB,MAAjBnC,GAAGC,WAAoB,CACvBqC,EAAOlE,KAAK,CAACuE,GAAO3C,KACpB,UAIZ,GAA0B,GAAtBiC,GAAQhC,YAAiD,GAA9BkC,GAAgBlC,WAC3C,GAAyB,GAArB+B,GAAO/B,YACP,GAAiC,MAA7BiC,GAAejC,WAAoB,CACnCqC,EAAOlE,KAAK,CAACuE,GAAOT,KACpB,eAED,GAAiC,GAA7BA,GAAejC,YACtB,GAAyB,MAArB+B,GAAO/B,WAAoB,CAC3BqC,EAAOlE,KAAK,CAACuE,GAAOX,KACpB,cAED,CACH,IAAIhC,GAAqB,EAAhB1C,KAAKU,SAAe,EAAIgE,GAASE,GAC1C,GAAqB,MAAjBlC,GAAGC,WAAoB,CACvBqC,EAAOlE,KAAK,CAACuE,GAAO3C,KACpB,UAIZ,GAA0B,GAAtBiC,GAAQhC,YAAwC,GAArB+B,GAAO/B,WAClC,GAAiC,GAA7BiC,GAAejC,YACf,GAAkC,MAA9BkC,GAAgBlC,WAAoB,CACpCqC,EAAOlE,KAAK,CAACuE,GAAOR,KACpB,eAED,GAAkC,GAA9BA,GAAgBlC,YACvB,GAAiC,MAA7BiC,GAAejC,WAAoB,CACnCqC,EAAOlE,KAAK,CAACuE,GAAOT,KACpB,cAED,CACH,IAAIlC,GAAqB,EAAhB1C,KAAKU,SAAe,EAAImE,GAAkBD,GACnD,GAAqB,MAAjBlC,GAAGC,WAAoB,CACvBqC,EAAOlE,KAAK,CAACuE,GAAO3C,KACpB,UAIZ,GAAiC,GAA7BkC,GAAejC,YAAiD,GAA9BkC,GAAgBlC,WAClD,GAAyB,GAArB+B,GAAO/B,YACP,GAA0B,MAAtBgC,GAAQhC,WAAoB,CAC5BqC,EAAOlE,KAAK,CAACuE,GAAOV,KACpB,eAED,GAA0B,GAAtBA,GAAQhC,YACf,GAAyB,MAArB+B,GAAO/B,WAAoB,CAC3BqC,EAAOlE,KAAK,CAACuE,GAAOX,KACpB,cAED,CACH,IAAIhC,GAAqB,EAAhB1C,KAAKU,SAAe,EAAIgE,GAASC,GAC1C,GAAqB,MAAjBjC,GAAGC,WAAoB,CACvBqC,EAAOlE,KAAK,CAACuE,GAAO3C,KACpB,YAOpB,IADA,IAAIkD,GAAiB,KACZ/E,GAAI,EAAGA,GAAImE,EAAO/F,OAAQ4B,KAAK,CACpC,IAAIwE,GAAQL,EAAOnE,IAAG,GACA,MAAlB+E,GACIP,GAAQO,GAAe,KAAIA,GAAiBZ,EAAOnE,KACpD+E,GAAiBZ,EAAOnE,IAEnC,GAAsB,MAAlB+E,GAEA,YADA9I,KAAKmH,eAAe2B,GAAe,GAAIxG,EAAQ0D,EAAcD,GAGjE,GAAI/F,KAAK0G,WAAWJ,IAAQtG,KAAK0G,WAAWH,IAAWvG,KAAK2G,YAAYP,EAAOE,IAAQtG,KAAK2G,YAAYP,EAAOG,GAAS,CACpH,IAAIO,GAAQ9G,KAAK+G,YAAYT,GAAMU,GAAWhH,KAAK+G,YAAYR,GAC/D,GAAwB,GAApBO,GAAMjB,YAA0C,MAAvBmB,GAASnB,WAGlC,OAFA7F,KAAKmH,eAAeH,GAAU1E,EAAQ0D,EAAcD,QACpD3D,QAAQC,IAAI,WAGhB,GAA2B,GAAvB2E,GAASnB,YAAuC,MAApBiB,GAAMjB,WAGlC,OAFA7F,KAAKmH,eAAeL,GAAOxE,EAAQ0D,EAAcD,QACjD3D,QAAQC,IAAI,WAIpB,GAAIrC,KAAK0G,WAAWF,IAAUxG,KAAK0G,WAAWD,GAAO,CACjD,IAAImB,GAAS5H,KAAK+G,YAAYN,GAAOoB,GAAU7H,KAAK+G,YAAYP,GAChE,GAAyB,GAArBoB,GAAO/B,YAAyC,MAAtBgC,GAAQhC,WAGlC,OAFAzD,QAAQC,IAAI,gBACZrC,KAAKmH,eAAeU,GAASvF,EAAQ0D,EAAcD,GAGvD,GAA0B,GAAtB8B,GAAQhC,YAAwC,MAArB+B,GAAO/B,WAGlC,OAFAzD,QAAQC,IAAI,gBACZrC,KAAKmH,eAAeS,GAAQtF,EAAQ0D,EAAcD,GAI1D,GAAI/F,KAAK0G,WAAWyB,IAAYnI,KAAK0G,WAAW4B,KAAiBtI,KAAKyH,cAAcrB,GAAQ,CACxF,IAAIwC,GAAY5I,KAAK+G,YAAYoB,GAAUU,GAAgB7I,KAAK+G,YAAYuB,GAC5E,GAA4B,GAAxBM,GAAU/C,YAA+C,MAA5BgD,GAAchD,WAG3C,OAFA7F,KAAKmH,eAAe0B,GAAevG,EAAQ0D,EAAcD,QACzD3D,QAAQC,IAAI,WAGhB,GAAgC,GAA5BwG,GAAchD,YAA2C,MAAxB+C,GAAU/C,WAG3C,OAFA7F,KAAKmH,eAAeyB,GAAWtG,EAAQ0D,EAAcD,QACrD3D,QAAQC,IAAI,WAIpB,GAAIrC,KAAK0G,WAAW0B,IAAapI,KAAK0G,WAAW2B,KAAgBrI,KAAKyH,cAAcrB,GAAQ,CACxF,IAAI2C,GAAa/I,KAAK+G,YAAYqB,GAAWY,GAAehJ,KAAK+G,YAAYsB,GAC7E,GAA6B,GAAzBU,GAAWlD,YAA8C,MAA3BmD,GAAanD,WAG3C,OAFA7F,KAAKmH,eAAe6B,GAAc1G,EAAQ0D,EAAcD,QACxD3D,QAAQC,IAAI,WAGhB,GAA+B,GAA3B2G,GAAanD,YAA4C,MAAzBkD,GAAWlD,WAG3C,OAFA7F,KAAKmH,eAAe4B,GAAYzG,EAAQ0D,EAAcD,QACtD3D,QAAQC,IAAI,YAKxB,IAAK,IAAI0B,GAAI,EAAGA,GAAIiC,EAAa7D,OAAQ4B,KAAK,CAC1C,IAAIqC,GAAQJ,EAAajC,IAAGsC,WACxBC,GAAOF,GAAQ,EAAIG,GAAUH,GAAQ,EAAII,GAASJ,GAAQpG,KAAKwD,KAAOiD,GAAQL,GAAQpG,KAAKwD,KAC/F,GAAIxD,KAAK0G,WAAWJ,KAAQtG,KAAK2G,YAAYP,GAAOE,IAAM,CACtD,GAAItG,KAAK0G,WAAWH,KAAWvG,KAAK2G,YAAYJ,GAAQH,IAAQ,CAC5D,IAAIU,GAAQ9G,KAAK+G,YAAYT,IAAMU,GAAWhH,KAAK+G,YAAYR,IAC/D,GAAwB,GAApBO,GAAMjB,YAA0C,MAAvBmB,GAASnB,WAGlC,OAFA7F,KAAKmH,eAAeH,GAAU1E,EAAQ0D,EAAcD,QACpD3D,QAAQC,IAAI,WAET,GAA2B,GAAvB2E,GAASnB,YAAuC,MAApBiB,GAAMjB,WAGzC,OAFA7F,KAAKmH,eAAeL,GAAOxE,EAAQ0D,EAAcD,QACjD3D,QAAQC,IAAI,WAIpB,IAAI4G,GAAY3C,GAAM,EACtB,GAAItG,KAAK0G,WAAWuC,KAAajJ,KAAK2G,YAAYL,GAAK2C,IAAW,CAC9D,IAAIC,GAAalJ,KAAK+G,YAAYkC,IAAWnC,GAAQ9G,KAAK+G,YAAYT,IACtE,GAAwB,GAApBQ,GAAMjB,YACN,GAA6B,MAAzBqD,GAAWrD,WAGX,OAFA7F,KAAKmH,eAAe+B,GAAY5G,EAAQ0D,EAAcD,QACtD3D,QAAQC,IAAI,gBAGb,GAA6B,GAAzB6G,GAAWrD,YACM,MAApBiB,GAAMjB,WAGN,OAFA7F,KAAKmH,eAAeL,GAAOxE,EAAQ0D,EAAcD,QACjD3D,QAAQC,IAAI,YAM5B,GAAIrC,KAAK0G,WAAWH,KAAWvG,KAAK2G,YAAYP,GAAOG,IAAS,CAC5D,IAAI0C,GAAY1C,GAAS,EACzB,GAAIvG,KAAK0G,WAAWuC,KAAajJ,KAAK2G,YAAYJ,GAAQ0C,IAAW,CACjE,IAAIC,GAAalJ,KAAK+G,YAAYkC,IAAWjC,GAAWhH,KAAK+G,YAAYR,IACzE,GAA2B,GAAvBS,GAASnB,YACT,GAA6B,MAAzBqD,GAAWrD,WAGX,OAFA7F,KAAKmH,eAAe+B,GAAY5G,EAAQ0D,EAAcD,QACtD3D,QAAQC,IAAI,gBAGb,GAA6B,GAAzB6G,GAAWrD,YACS,MAAvBmB,GAASnB,WAGT,OAFA7F,KAAKmH,eAAeH,GAAU1E,EAAQ0D,EAAcD,QACpD3D,QAAQC,IAAI,YAM5B,GAAIrC,KAAK0G,WAAWF,IAAQ,CACxB,GAAIxG,KAAK0G,WAAWD,IAAO,CACvB,IAAIoB,GAAU7H,KAAK+G,YAAYP,IAAQoB,GAAS5H,KAAK+G,YAAYN,IACjE,GAA0B,GAAtBoB,GAAQhC,YAAwC,MAArB+B,GAAO/B,WAGlC,OAFA7F,KAAKmH,eAAeS,GAAQtF,EAAQ0D,EAAcD,QAClD3D,QAAQC,IAAI,WAET,GAAyB,GAArBuF,GAAO/B,YAAyC,MAAtBgC,GAAQhC,WAGzC,OAFA7F,KAAKmH,eAAeU,GAASvF,EAAQ0D,EAAcD,QACnD3D,QAAQC,IAAI,WAIpB,IAAI4G,GAAYzC,GAAQxG,KAAKwD,KAC7B,GAAIxD,KAAK0G,WAAWuC,IAAW,CAC3B,IAAIC,GAAalJ,KAAK+G,YAAYkC,IAAWpB,GAAU7H,KAAK+G,YAAYP,IACxE,GAA0B,GAAtBqB,GAAQhC,YACR,GAA6B,MAAzBqD,GAAWrD,WAGX,OAFAzD,QAAQC,IAAI,gBACZrC,KAAKmH,eAAe+B,GAAY5G,EAAQ0D,EAAcD,QAGvD,GAA6B,GAAzBmD,GAAWrD,YACQ,MAAtBgC,GAAQhC,WAGR,OAFAzD,QAAQC,IAAI,iBACZrC,KAAKmH,eAAeU,GAASvF,EAAQ0D,EAAcD,IAMnE,GAAI/F,KAAK0G,WAAWD,IAAO,CACvB,IAAIwC,GAAYxC,GAAOzG,KAAKwD,KAC5B,GAAIxD,KAAK0G,WAAWuC,IAAW,CAC3B,IAAIC,GAAalJ,KAAK+G,YAAYkC,IAAWrB,GAAS5H,KAAK+G,YAAYN,IACvE,GAAyB,GAArBmB,GAAO/B,YACP,GAA6B,MAAzBqD,GAAWrD,WAGX,OAFAzD,QAAQC,IAAI,iBACZrC,KAAKmH,eAAe+B,GAAY5G,EAAQ0D,EAAcD,QAGvD,GAA6B,GAAzBmD,GAAWrD,YACO,MAArB+B,GAAO/B,WAGP,OAFAzD,QAAQC,IAAI,iBACZrC,KAAKmH,eAAeS,GAAQtF,EAAQ0D,EAAcD,IAMlE,IAAIoC,GAAU7B,GAAMtG,KAAKwD,KACrB8E,GAAc/B,GAASvG,KAAKwD,KAChC,GAAIxD,KAAK0G,WAAWyB,KAAYnI,KAAK0G,WAAW4B,MAAiBtI,KAAKyH,cAAcrB,IAAQ,CACxF,IAAIwC,GAAY5I,KAAK+G,YAAYoB,IAAUU,GAAgB7I,KAAK+G,YAAYuB,IAC5E,GAA4B,GAAxBM,GAAU/C,YACV,GAAgC,MAA5BgD,GAAchD,WAGd,OAFAzD,QAAQC,IAAI,iBACZrC,KAAKmH,eAAe0B,GAAevG,EAAQ0D,EAAcD,QAG1D,GAAgC,GAA5B8C,GAAchD,YACO,MAAxB+C,GAAU/C,WAGV,OAFAzD,QAAQC,IAAI,iBACZrC,KAAKmH,eAAeyB,GAAWtG,EAAQ0D,EAAcD,GAMjE,IAAIqC,GAAW9B,GAAMtG,KAAKwD,KACtB6E,GAAa9B,GAASvG,KAAKwD,KAC/B,GAAIxD,KAAK0G,WAAW0B,KAAapI,KAAK0G,WAAW2B,MAAgBrI,KAAKyH,cAAcrB,IAAQ,CACxF,IAAI2C,GAAa/I,KAAK+G,YAAYqB,IAAWY,GAAehJ,KAAK+G,YAAYsB,IAC7E,GAA6B,GAAzBU,GAAWlD,YACX,GAA+B,MAA3BmD,GAAanD,WAGb,OAFAzD,QAAQC,IAAI,iBACZrC,KAAKmH,eAAe6B,GAAc1G,EAAQ0D,EAAcD,QAGzD,GAA+B,GAA3BiD,GAAanD,YACS,MAAzBkD,GAAWlD,WAGX,OAFAzD,QAAQC,IAAI,iBACZrC,KAAKmH,eAAe4B,GAAYzG,EAAQ0D,EAAcD,UArnBtE,GAAIC,EAAa7D,OAAS,EACtB,IAAK,IAAI4B,GAAI,EAAGA,GAAI/D,KAAKyD,UAAUtB,OAAQ4B,KACvC,GAAI/D,KAAKyD,UAAUM,IAAGsC,YAAenD,KAAKiG,MAAOnJ,KAAKwD,KAAOxD,KAAKwD,KAAQ,GAAK,CAC3E,GAAqC,OAAjCxD,KAAKyD,UAAUM,IAAG8B,WAElB,YADA7F,KAAKmH,eAAenH,KAAKyD,UAAUM,IAAIzB,EAAQ0D,EAAcD,GAG7D,IAAInE,GAAsB,EAAhBsB,KAAKU,SAAe,EAAI,EAAI5D,KAAKyD,UAAUtB,OAAS,EAE9D,YADAnC,KAAKmH,eAAenH,KAAKyD,UAAU7B,IAAMU,EAAQ0D,EAAcD,GAonBnF,IAAK,IAAIhC,GAAI,EAAGA,GAAIiC,EAAa7D,OAAQ4B,KAAK,CAC1C,IAAIqC,GAAQJ,EAAajC,IAAGsC,WACxBC,GAAOF,GAAQ,EAAIG,GAAUH,GAAQ,EAAII,GAASJ,GAAQpG,KAAKwD,KAAOiD,GAAQL,GAAQpG,KAAKwD,KAC/F,GAAIxD,KAAK0G,WAAWJ,IAAM,CACtB,IAAIQ,GAAQ9G,KAAK+G,YAAYT,IAC7B,GAAwB,MAApBQ,GAAMjB,WAGN,OAFAzD,QAAQC,IAAI,gBACZrC,KAAKmH,eAAeL,GAAOxE,EAAQ0D,EAAcD,GAIzD,GAAI/F,KAAK0G,WAAWH,IAAS,CACzB,IAAIS,GAAWhH,KAAK+G,YAAYR,IAChC,GAA2B,MAAvBS,GAASnB,WAET,YADA7F,KAAKmH,eAAeH,GAAU1E,EAAQ0D,EAAcD,GAI5D,GAAI/F,KAAK0G,WAAWF,IAAQ,CACxB,IAAIqB,GAAU7H,KAAK+G,YAAYP,IAC/B,GAA0B,MAAtBqB,GAAQhC,WAER,YADA7F,KAAKmH,eAAeU,GAASvF,EAAQ0D,EAAcD,GAI3D,GAAI/F,KAAK0G,WAAWD,IAAO,CACvB,IAAImB,GAAS5H,KAAK+G,YAAYN,IAC9B,GAAyB,MAArBmB,GAAO/B,WAEP,YADA7F,KAAKmH,eAAeS,GAAQtF,EAAQ0D,EAAcD,4CAMnDH,EAAItD,EAAQ0D,EAAcD,GACrC3D,QAAQC,IAAIa,KAAKU,SAAW,iBAAmBgC,EAAGS,YAClDT,EAAGE,MAAM9F,KAAK0D,KAAMpB,EAAQtC,KAAKuC,UAC5BvC,KAAKiG,qBAAqBD,EAAcD,KACzC/F,KAAK0D,KAAO,EACZ1D,KAAKkE,mBAAmB,sDAIX8B,EAAcD,GAE/B,IADA,IAAIqD,GAAY,EACPrF,EAAI,EAAGA,EAAI/D,KAAKyD,UAAUtB,OAAQ4B,IACvC,GAAoC,MAAhC/D,KAAKyD,UAAUM,GAAG8B,WAAoB,CACtCuD,GAAY,EACZ,MAGR,IAAKA,EAED,OADApJ,KAAKqJ,kBAAkB,QAChB,EAEX,IAAK,IAAItF,EAAI,EAAGA,EAAIiC,EAAa7D,OAAQ4B,IAAK,CAC1C,IAAIqC,EAAQJ,EAAajC,GAAGsC,WACxBC,EAAOF,EAAQ,EAAIG,EAAUH,EAAQ,EAAII,EAASJ,EAAQpG,KAAKwD,KAAOiD,EAAQL,EAAQpG,KAAKwD,KAC/F,GAAIxD,KAAK0G,WAAWJ,IAAQtG,KAAK0G,WAAWH,IAAWvG,KAAK2G,YAAYP,EAAOE,IAAQtG,KAAK2G,YAAYP,EAAOG,GAAS,CACpH,IAAIO,EAAQ9G,KAAK+G,YAAYT,GAAMU,EAAWhH,KAAK+G,YAAYR,GAC/D,GAAwB,GAApBO,EAAMjB,YAA0C,GAAvBmB,EAASnB,WAAiB,CACnD,KAAI7F,KAAKwD,KAAO,GAWT,CACH,IAAI8F,EAAS,CAACxC,EAAOE,EAAUhB,EAAajC,IAG5C,OAFA/D,KAAKqJ,kBAAkB,MAAOC,GAC9BlH,QAAQC,IAAI,UACL,EAdP,IAAIkH,EAAejD,EAAM,EAAIkD,EAAkBjD,EAAS,EACxD,GAAIvG,KAAK0G,WAAW8C,IAAmBxJ,KAAK0G,WAAW6C,IAAgBvJ,KAAK2G,YAAYP,EAAOmD,IAAgBvJ,KAAK2G,YAAYP,EAAOoD,GAAiB,CACpJ,IAAIC,EAAmBzJ,KAAK+G,YAAYyC,GAAiBE,EAAgB1J,KAAK+G,YAAYwC,GAC1F,GAAmC,GAA/BE,EAAiB5D,YAA+C,GAA5B6D,EAAc7D,WAAiB,CACnE,IAAIyD,EAAS,CAACxC,EAAOE,EAAUyC,EAAkBC,EAAe1D,EAAajC,IAG7E,OAFA/D,KAAKqJ,kBAAkB,MAAOC,GAC9BlH,QAAQC,IAAI,iBACL,KAW3B,GAAIrC,KAAK0G,WAAWD,IAASzG,KAAK0G,WAAWF,GAAQ,CACjD,IAAIoB,EAAS5H,KAAK+G,YAAYN,GAAOoB,EAAU7H,KAAK+G,YAAYP,GAChE,GAAyB,GAArBoB,EAAO/B,YAAyC,GAAtBgC,EAAQhC,aAAoB7F,KAAKyH,cAAcrB,GAAQ,CACjF,KAAIpG,KAAKwD,KAAO,GAWT,CACH,IAAI8F,EAAS,CAAC1B,EAAQC,EAAS7B,EAAajC,IAG5C,OAFA/D,KAAKqJ,kBAAkB,MAAOC,GAC9BlH,QAAQC,IAAI,UACL,EAdP,IAAIsH,EAAgBlD,EAAOzG,KAAKwD,KAAOoG,EAAiBpD,EAAQxG,KAAKwD,KACrE,GAAIxD,KAAK0G,WAAWiD,IAAiB3J,KAAK0G,WAAWkD,KAAmB5J,KAAKyH,cAAchB,KAAUzG,KAAKyH,cAAcjB,GAAQ,CAC5H,IAAIqD,EAAiB7J,KAAK+G,YAAY4C,GAAeG,EAAkB9J,KAAK+G,YAAY6C,GACxF,GAAiC,GAA7BC,EAAehE,YAAiD,GAA9BiE,EAAgBjE,WAAiB,CACnE,IAAIyD,EAAS,CAACO,EAAgBC,EAAiB9D,EAAajC,IAG5D,OAFA/D,KAAKqJ,kBAAkB,MAAOC,GAC9BlH,QAAQC,IAAI,iBACL,KAW3B,IAAI+F,EAAW9B,EAAMtG,KAAKwD,KACtB6E,EAAa9B,EAASvG,KAAKwD,KAC/B,GAAIxD,KAAK2G,YAAYP,EAAOE,IAAQtG,KAAK2G,YAAYP,EAAOG,IAAWvG,KAAK0G,WAAW0B,IAAapI,KAAK0G,WAAW2B,GAAa,CAC7H,IAAIU,EAAa/I,KAAK+G,YAAYqB,GAAWY,EAAehJ,KAAK+G,YAAYsB,GAC7E,IAAKrI,KAAKyH,cAAcrB,IAAmC,GAAzB2C,EAAWlD,YAA8C,GAA3BmD,EAAanD,WAAiB,CAC1F,KAAI7F,KAAKwD,KAAO,GAWT,CACH,IAAI8F,EAAS,CAACP,EAAYC,EAAchD,EAAajC,IAGrD,OAFA/D,KAAKqJ,kBAAkB,MAAOC,GAC9BlH,QAAQC,IAAI,UACL,EAdP,IAAI0H,EAAoB3B,EAAW,EAAKpI,KAAKwD,KAAMwG,EAAsB3B,EAAa,EAAKrI,KAAKwD,KAChG,GAAIxD,KAAK0G,WAAWqD,IAAqB/J,KAAK0G,WAAWsD,KAAwBhK,KAAKyH,cAAcW,KAAcpI,KAAKyH,cAAcY,GAAa,CAC9I,IAAI4B,EAAqBjK,KAAK+G,YAAYgD,GAAmBG,EAAuBlK,KAAK+G,YAAYiD,GACrG,GAAqC,GAAjCC,EAAmBpE,YAAsD,GAAnCqE,EAAqBrE,WAAiB,CAC5E,IAAIyD,EAAS,CAACP,EAAYC,EAAchD,EAAajC,IAGrD,OAFA/D,KAAKqJ,kBAAkB,MAAOC,GAC9BlH,QAAQC,IAAI,iBACL,KAW3B,IAAI8F,EAAU7B,EAAMtG,KAAKwD,KACrB8E,EAAc/B,EAASvG,KAAKwD,KAChC,GAAIxD,KAAK0G,WAAWyB,IAAYnI,KAAK0G,WAAW4B,GAAc,CAC1D,IAAIM,EAAY5I,KAAK+G,YAAYoB,GAAUU,EAAgB7I,KAAK+G,YAAYuB,GAC5E,IAAKtI,KAAKyH,cAAcrB,IAAkC,GAAxBwC,EAAU/C,YAA+C,GAA5BgD,EAAchD,WAAiB,CAC1F,KAAI7F,KAAKwD,KAAO,GAWT,CACH,IAAI8F,EAAS,CAACV,EAAWC,EAAe7C,EAAajC,IAGrD,OAFA/D,KAAKqJ,kBAAkB,MAAOC,GAC9BlH,QAAQC,IAAI,UACL,EAdP,IAAI8H,EAAmBhC,EAAU,EAAKnI,KAAKwD,KAAM4G,EAAuB9B,EAAc,EAAKtI,KAAKwD,KAChG,GAAIxD,KAAK0G,WAAWyD,IAAoBnK,KAAK0G,WAAW0D,KAAyBpK,KAAKyH,cAAca,KAAiBtI,KAAKyH,cAAcU,GAAU,CAC9I,IAAIkC,EAAoBrK,KAAK+G,YAAYoD,GAAkBG,EAAwBtK,KAAK+G,YAAYqD,GACpG,GAAoC,GAAhCC,EAAkBxE,YAAuD,GAApCyE,EAAsBzE,WAAiB,CAC5E,IAAIyD,EAAS,CAACV,EAAWC,EAAeyB,EAAuBD,EAAmBrE,EAAajC,IAG/F,OAFA/D,KAAKqJ,kBAAkB,MAAOC,GAC9BlH,QAAQC,IAAI,iBACL,MAY/B,IAAK,IAAI0B,EAAI,EAAGA,EAAIgC,EAAS5D,OAAQ4B,IAAK,CACtC,IAAIqC,EAAQL,EAAShC,GAAGsC,WACpBC,EAAOF,EAAQ,EAAIG,EAAUH,EAAQ,EAAII,EAASJ,EAAQpG,KAAKwD,KAAOiD,EAAQL,EAAQpG,KAAKwD,KAC/F,GAAIxD,KAAK0G,WAAWJ,IAAQtG,KAAK0G,WAAWH,IAAWvG,KAAK2G,YAAYP,EAAOG,IAAWvG,KAAK2G,YAAYP,EAAOE,GAAM,CACpH,IAAIQ,EAAQ9G,KAAK+G,YAAYT,GAAMU,EAAWhH,KAAK+G,YAAYR,GAC/D,GAAwB,GAApBO,EAAMjB,YAA0C,GAAvBmB,EAASnB,WAAiB,CACnD,KAAI7F,KAAKwD,KAAO,GAWT,CACH,IAAI8F,GAAS,CAACxC,EAAOE,EAAUjB,EAAShC,IAGxC,OAFA/D,KAAKqJ,kBAAkB,KAAMC,IAC7BlH,QAAQC,IAAI,UACL,EAdP,IAAIkH,GAAejD,EAAM,EAAIkD,GAAkBjD,EAAS,EACxD,GAAIvG,KAAK0G,WAAW8C,KAAmBxJ,KAAK0G,WAAW6C,KAAgBvJ,KAAK2G,YAAYP,EAAOoD,KAAmBxJ,KAAK2G,YAAYP,EAAOmD,IAAc,CACpJ,IAAIE,GAAmBzJ,KAAK+G,YAAYyC,IAAiBE,GAAgB1J,KAAK+G,YAAYwC,IAC1F,GAAmC,GAA/BE,GAAiB5D,YAA+C,GAA5B6D,GAAc7D,WAAiB,CACnE,IAAIyD,GAAS,CAACxC,EAAOE,EAAUyC,GAAkBC,GAAe3D,EAAShC,IAGzE,OAFA/D,KAAKqJ,kBAAkB,KAAMC,IAC7BlH,QAAQC,IAAI,iBACL,KAW3B,GAAIrC,KAAK0G,WAAWD,IAASzG,KAAK0G,WAAWF,GAAQ,CACjD,IAAIoB,GAAS5H,KAAK+G,YAAYN,GAAOoB,GAAU7H,KAAK+G,YAAYP,GAChE,GAAyB,GAArBoB,GAAO/B,YAAyC,GAAtBgC,GAAQhC,WAAiB,CACnD,KAAI7F,KAAKwD,KAAO,GAWT,CACH,IAAI8F,GAAS,CAAC1B,GAAQC,GAAS9B,EAAShC,IAGxC,OAFA/D,KAAKqJ,kBAAkB,KAAMC,IAC7BlH,QAAQC,IAAI,UACL,EAdP,IAAIsH,GAAgBlD,EAAOzG,KAAKwD,KAAOoG,GAAiBpD,EAAQxG,KAAKwD,KACrE,GAAIxD,KAAK0G,WAAWiD,KAAiB3J,KAAK0G,WAAWkD,MAAmB5J,KAAKyH,cAAcjB,KAAWxG,KAAKyH,cAAchB,KAAUzG,KAAKyH,cAAcrB,GAAQ,CAC1J,IAAIyD,GAAiB7J,KAAK+G,YAAY4C,IAAeG,GAAkB9J,KAAK+G,YAAY6C,IACxF,GAAiC,GAA7BC,GAAehE,YAAiD,GAA9BiE,GAAgBjE,WAAiB,CACnE,IAAIyD,GAAS,CAAC1B,GAAQC,GAASgC,GAAgBC,GAAiB/D,EAAShC,IAGzE,OAFA/D,KAAKqJ,kBAAkB,KAAMC,IAC7BlH,QAAQC,IAAI,iBACL,KAW3B,IAAI8F,GAAU7B,EAAMtG,KAAKwD,KACrB8E,GAAc/B,EAASvG,KAAKwD,KAChC,GAAIxD,KAAK0G,WAAWyB,KAAYnI,KAAK0G,WAAW4B,IAAc,CAC1D,IAAIM,GAAY5I,KAAK+G,YAAYoB,IAAUU,GAAgB7I,KAAK+G,YAAYuB,IAC5E,GAA4B,GAAxBM,GAAU/C,YAA+C,GAA5BgD,GAAchD,aAAoB7F,KAAKyH,cAAcrB,GAAQ,CAC1F,KAAIpG,KAAKwD,KAAO,GAWT,CACH,IAAI8F,GAAS,CAACV,GAAWC,GAAe9C,EAAShC,IAGjD,OAFA/D,KAAKqJ,kBAAkB,KAAMC,IAC7BlH,QAAQC,IAAI,UACL,EAdP,IAAI8H,GAAmBhC,GAAU,EAAKnI,KAAKwD,KAAM4G,GAAuB9B,GAAc,EAAKtI,KAAKwD,KAChG,GAAIxD,KAAK0G,WAAWyD,KAAoBnK,KAAK0G,WAAW0D,MAAyBpK,KAAKyH,cAAca,MAAiBtI,KAAKyH,cAAcU,IAAU,CAC9I,IAAIkC,GAAoBrK,KAAK+G,YAAYoD,IAAkBG,GAAwBtK,KAAK+G,YAAYqD,IACpG,GAAoC,GAAhCC,GAAkBxE,YAAuD,GAApCyE,GAAsBzE,WAAiB,CAC5E,IAAIyD,GAAS,CAACV,GAAWC,GAAeyB,GAAuBD,GAAmBtE,EAAShC,IAG3F,OAFA/D,KAAKqJ,kBAAkB,KAAMC,IAC7BlH,QAAQC,IAAI,iBACL,KAW3B,IAAI+F,GAAW9B,EAAMtG,KAAKwD,KACtB6E,GAAa9B,EAASvG,KAAKwD,KAC/B,GAAIxD,KAAK0G,WAAW2B,KAAerI,KAAK0G,WAAW0B,MAAcpI,KAAKyH,cAAcrB,GAAQ,CACxF,IAAI2C,GAAa/I,KAAK+G,YAAYqB,IAAWY,GAAehJ,KAAK+G,YAAYsB,IAC7E,GAA6B,GAAzBU,GAAWlD,YAA8C,GAA3BmD,GAAanD,aAAoB7F,KAAKyH,cAAcrB,GAAQ,CAC1F,KAAIpG,KAAKwD,KAAO,GAWT,CACH,IAAI8F,GAAS,CAACP,GAAYC,GAAcjD,EAAShC,IAGjD,OAFA/D,KAAKqJ,kBAAkB,KAAMC,IAC7BlH,QAAQC,IAAI,UACL,EAdP,IAAI0H,GAAoB3B,GAAW,EAAKpI,KAAKwD,KAAMwG,GAAsB3B,GAAa,EAAKrI,KAAKwD,KAChG,GAAIxD,KAAK0G,WAAWqD,KAAqB/J,KAAK0G,WAAWsD,MAAwBhK,KAAKyH,cAAcW,MAAcpI,KAAKyH,cAAcY,IAAa,CAC9I,IAAI4B,GAAqBjK,KAAK+G,YAAYgD,IAAmBG,GAAuBlK,KAAK+G,YAAYiD,IACrG,GAAqC,GAAjCC,GAAmBpE,YAAsD,GAAnCqE,GAAqBrE,WAAiB,CAC5E,IAAIyD,GAAS,CAACP,GAAYC,GAAckB,GAAsBD,GAAoBlE,EAAShC,IAG3F,OAFA/D,KAAKqJ,kBAAkB,KAAMC,IAC7BlH,QAAQC,IAAI,iBACL,MAY/B,OAAO,qCAGA+D,GACP,OAAOA,GAAS,GAAKA,EAASpG,KAAKwD,KAAOxD,KAAKwD,yCAGvC+G,EAAIC,GACZ,OAAOtH,KAAKiG,MAAMoB,EAAKvK,KAAKwD,OAASN,KAAKiG,MAAMqB,EAAKxK,KAAKwD,4CAGhD+G,GACV,IAAK,IAAIxG,EAAI,EAAGA,EAAI/D,KAAK8D,UAAU3B,OAAQ4B,IACvC,GAAIwG,GAAMvK,KAAK8D,UAAUC,GAAI,OAAO,EAExC,OAAO,kDAGawG,EAAIC,GAGxB,IAFA,IAAI5I,EAAM,EACN6I,GAAW,GACPA,GAAU,CAEd,IAAIC,EAAYH,GADhB3I,GAAO5B,KAAKwD,MAGZ,GADKxD,KAAK0G,WAAWgE,KAAYD,GAAW,GACxCC,GAAaF,EAAI,OAAO,EAIhC,IAFAC,GAAW,EACX7I,EAAM,GACE6I,GAAU,CAEd,IAAIE,EAAYJ,GADhB3I,GAAO5B,KAAKwD,MAGZ,GADKxD,KAAK0G,WAAWiE,KAAYF,GAAW,GACxCE,GAAaH,EAAI,OAAO,EAEhC,OAAO,sCAGCpE,GACR,IAAK,IAAIrC,EAAI,EAAGA,EAAI/D,KAAKyD,UAAUtB,OAAQ4B,IACvC,GAAI/D,KAAKyD,UAAUM,GAAGsC,YAAcD,EAAO,OAAOpG,KAAKyD,UAAUM,GAErE,OAAO,gDAGQ6G,GACfA,EAAO,SAAWA,EAAO,SACzBpI,SAAS4B,eAAe,aAAayG,UAAY,SAAWD,EAAO,wDAGrDE,EAAQxB,GAEtB,IAAIyB,EAAY,UADhBD,EAAS,SAAWA,EAAS,UACO,eAEpC,IAD8B,GAA1BA,EAAOE,QAAQ,SAAcD,EAAY,SAAWD,EAAS,gBACnD,MAAVxB,EAAJ,CAIA9G,SAAS4B,eAAe,aAAayG,UAAYE,EACjD,IAAIvK,EAAMgC,SAASC,cAAc,eAAeC,WAAW,MAC3DlC,EAAIiE,UAAa,GAAKzE,KAAKwD,KAC3BhD,EAAIyK,YAAc,MAClB,IAAK,IAAIlH,EAAI,EAAGA,EAAIuF,EAAOnH,OAAQ4B,IAAK,CACpC,IAAImH,EAAM5B,EAAOvF,GAAGpB,eAChBzC,EAASgL,EAAItI,YAAazC,EAAS+K,EAAIrI,YAC3CrC,EAAIS,YACJT,EAAIgB,OAAOtB,EAAOG,OAAQH,EAAOI,QACjCE,EAAIiB,OAAOtB,EAAOE,OAAQH,EAAOI,QACjCE,EAAIiB,OAAOtB,EAAOE,OAAQF,EAAOG,QACjCE,EAAIiB,OAAOvB,EAAOG,OAAQF,EAAOG,QACjCE,EAAIiB,OAAOvB,EAAOG,OAAQH,EAAOI,QACjCE,EAAIW,SAERX,EAAIiE,UAAa,GAAKzE,KAAKwD,KAC3BhD,EAAIyK,YAAc,aAnBdzI,SAAS4B,eAAe,aAAayG,UAAYE,EAAUI,OAAO,EAAGJ,EAAU5I,OAAS,aCn8BrFiJ,cAzGb,SAAAA,EAAYC,GAAO,IAAApH,EAAA,OAAAnE,OAAAC,EAAA,EAAAD,CAAAE,KAAAoL,IACjBnH,EAAAnE,OAAAwL,EAAA,EAAAxL,CAAAE,KAAAF,OAAAyL,EAAA,EAAAzL,CAAAsL,GAAAI,KAAAxL,KAAMqL,KACDI,aAAe,KACpBxH,EAAKyH,MAAQ,CAAEC,YAAY,GAC3B1H,EAAK2H,WAAa3H,EAAK2H,WAAW5K,KAAhBlB,OAAA+L,EAAA,EAAA/L,QAAA+L,EAAA,EAAA/L,CAAAmE,KAClBA,EAAK6H,WAAa7H,EAAK6H,WAAW9K,KAAhBlB,OAAA+L,EAAA,EAAA/L,QAAA+L,EAAA,EAAA/L,CAAAmE,KAClBA,EAAKX,WAAa,SAClBW,EAAKZ,SAAW,EAPCY,wEAWjB,GAAIjE,KAAK0L,MAAMC,WAAY,CACzB,IAAII,EAAgBvJ,SAAS4B,eAAe,YAAY4H,qBAAqB,UAAU,GACnFC,EAAsBzJ,SAAS4B,eAAe,gBAAgB4H,qBAAqB,UAAU,GACjGhM,KAAKsD,WAAa2I,EAAoBC,QAAQD,EAAoBE,eAAerK,MACjF,IAAI0B,EAAOuI,EAAcG,QAAQH,EAAcI,eAAerK,MAG9D,OAFA9B,KAAKqD,SAAW+I,SAAS5I,EAAK2H,OAAO,EAAG,IAGtCkB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACRH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACNH,EAAAC,EAAAC,cAAA,uBAEFF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,kBACRH,EAAAC,EAAAC,cAAA,UAAQC,GAAG,UAAUC,QAASzM,KAAK8L,YAAnC,iBAEAO,EAAAC,EAAAC,cAAA,OAAKC,GAAG,kBACNH,EAAAC,EAAAC,cAAA,UAAQC,GAAG,aAAahI,OAAO,QAAQF,MAAM,WAE/C+H,EAAAC,EAAAC,cAAA,KAAGC,GAAG,cACNH,EAAAC,EAAAC,cAAA,KAAGC,GAAG,sBAKV,OACEH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACNH,EAAAC,EAAAC,cAAA,uBAEFF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUE,MAAO,CAAEpI,MAAO,QAASqI,OAAQ,WACjDN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YACNH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,oCAGJF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBACNH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,8BAGJF,EAAAC,EAAAC,cAAA,UAAQC,GAAG,WAAWC,QAASzM,KAAK4L,YAApC,wDAQR,GAAG5L,KAAK0L,MAAMC,WAAY,CACxB3L,KAAKyL,aAAe,IAAIrI,EAAKpD,KAAKqD,SAAUrD,KAAKsD,YACjD,IAAIA,EAAad,SAAS4B,eAAe,mBACzCd,EAAWsJ,UAAY5M,KAAKsD,WAC5B,IAAIuJ,EAAQ,QACZ,OAAO7M,KAAKsD,YACV,IAAK,SACHuJ,EAAQ,SACR,MACF,IAAK,OACHA,EAAQ,YACR,MACF,IAAK,aACHA,EAAQ,MAKZvJ,EAAWoJ,MAAMG,MAAQA,EACzB7M,KAAKyL,aAAaqB,6CAKpB9M,KAAK+M,SAAS,CAAEpB,YAAY,yCAI5B3L,KAAKyL,aAAe,KACpBzL,KAAK+M,SAAS,CAAEpB,YAAY,8CAI5B,OAAO3L,KAAKyL,oBAtGEuB,aCQEC,QACW,cAA7B7L,OAAO8L,SAASC,UAEe,UAA7B/L,OAAO8L,SAASC,UAEhB/L,OAAO8L,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAAS/K,SAAS4B,eAAe,SD2H3C,kBAAmBoJ,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a04675f3.chunk.js","sourcesContent":["class CanvasCoordinates {\r\n\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    getX() {\r\n        return this.x;\r\n    }\r\n\r\n    getY() {\r\n        return this.y;\r\n    }\r\n\r\n    setX(x) {\r\n        this.x = x;\r\n    }\r\n\r\n    setY(y) {\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nexport default CanvasCoordinates;","import CanvasCoordinates from './CanvasCoordinates';\r\n\r\nclass CanvasCoordinatesSelection {\r\n\r\n     constructor(coord1, coord2) {\r\n         this.coord1 = coord1;\r\n         this.coord2 = coord2;\r\n     }\r\n\r\n     getCoord1() {\r\n         return this.coord1;\r\n     }\r\n\r\n     getCoord2() {\r\n         return this.coord2;\r\n     }\r\n\r\n     contains(coord) {\r\n        return (coord.getX() >= this.coord1.getX() && coord.getX() <= this.coord2.getX() && coord.getY() >= this.coord1.getY() && coord.getY() <= this.coord2.getY());\r\n     }\r\n}\r\n\r\nexport default CanvasCoordinatesSelection;","import CanvasCoordinates from '../wrappers/CanvasCoordinates'\r\n\r\nclass DrawCircleAnim {\r\n\r\n    constructor(ctx, cc, radius, startAngle, endAngle, gainPerTick) {\r\n        this.ctx = ctx;\r\n        this.cc = cc;\r\n        this.radius = radius;\r\n        this.startAngle = startAngle;\r\n        this.endAngle = endAngle;\r\n        this.gainPerTick = gainPerTick;\r\n        this.curAngle = 0;\r\n        this.tick = this.tick.bind(this);\r\n    }\r\n\r\n    tick() {\r\n        this.curAngle+=this.gainPerTick;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.cc.getX(), this.cc.getY(), this.radius, this.startAngle, this.curAngle);\r\n        this.ctx.stroke();\r\n        if(this.curAngle < this.endAngle) {\r\n            window.requestAnimationFrame(this.tick);\r\n        }\r\n    }\r\n}\r\n\r\nexport default DrawCircleAnim;","import CanvasCoordinates from \"../wrappers/CanvasCoordinates\";\r\nimport { throws } from \"assert\";\r\nimport { request } from \"http\";\r\n\r\nclass DrawCrossAnim {\r\n\r\n    constructor(ctx, cc, gainPerTick, radius) {\r\n        this.ctx = ctx;\r\n        this.radius = radius;\r\n        this.cc = cc;\r\n        this.gainPerTick = gainPerTick;\r\n        this.curGain = 0;\r\n        this.tick = this.tick.bind(this);\r\n    }\r\n\r\n    tick() {\r\n        this.curGain += this.gainPerTick;\r\n        this.ctx.beginPath();\r\n        let x = this.cc.getX(), y = this.cc.getY();\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.lineTo(x + this.curGain, y + this.curGain);\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.lineTo(x - this.curGain, y - this.curGain);\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.lineTo(x - this.curGain, y + this.curGain);\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.lineTo(x + this.curGain, y - this.curGain);\r\n        this.ctx.stroke();\r\n        if(this.curGain < this.radius) {\r\n            window.requestAnimationFrame(this.tick);\r\n        }\r\n    }\r\n}\r\n\r\nexport default DrawCrossAnim;","import React, { Component } from 'react';\r\nimport CanvasCoordinates from './CanvasCoordinates'\r\nimport CanvasCoordinatesSelection from './CanvasCoordinatesSelection'\r\nimport DrawCircleAnim from '../tasks/DrawCircleAnim'\r\nimport DrawCrossAnim from '../tasks/DrawCrossAnim'\r\n\r\nclass CellState {\r\n\r\n    constructor(sel, num) {\r\n        this.selection = sel;\r\n        this.value = null;\r\n        this.owner = null;\r\n        this.num = num;\r\n    }\r\n\r\n    getSelection() {\r\n        return this.selection;\r\n    }\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n\r\n    getIndex() {\r\n        return this.num;\r\n    }\r\n\r\n    setValue(val) {\r\n        let err = \"You can only set a CellState's value with either x, o, or null.\";\r\n        if (!val.includes(\"x\") && !val.includes(\"o\")) {\r\n            console.log(err);\r\n            this.value = null;\r\n        } else if (val.length > 1) {\r\n            console.log(err);\r\n            this.value = null;\r\n        } else {\r\n            this.value = val;\r\n        }\r\n    }\r\n\r\n    setOwner(owner) {\r\n        let err = \"You can only set a CellState's owner with either 0 or 1 (Player number).\";\r\n        if (owner != 0 && owner != 1) {\r\n            console.log(err);\r\n            return;\r\n        }\r\n        this.owner = owner;\r\n    }\r\n\r\n    getOwner() {\r\n        return this.owner;\r\n    }\r\n\r\n    claim(owner, symbol, jumpSize) {\r\n        let ctx = document.querySelector(\"#gamecanvas\").getContext(\"2d\");\r\n        let sel = this.getSelection();\r\n        let coord1 = sel.getCoord1(), coord2 = sel.getCoord2();\r\n        let midX = ((coord1.getX() + coord2.getX()) / 2), midY = ((coord1.getY() + coord2.getY()) / 2);\r\n        if (symbol === (\"x\")) {\r\n            new DrawCrossAnim(ctx, new CanvasCoordinates(midX, midY), 1.5, (jumpSize / 3)).tick();\r\n            this.setValue(symbol);\r\n            this.setOwner(owner);\r\n        } else if (symbol === (\"o\")) {\r\n            new DrawCircleAnim(ctx, new CanvasCoordinates(midX, midY), (jumpSize / 3), 0, Math.PI * 2, (Math.PI * 2) / 50).tick();\r\n            this.setValue(symbol);\r\n            this.setOwner(owner);\r\n        }\r\n    }\r\n}\r\n\r\nexport default CellState;","import CellState from './wrappers/CellState'\r\nimport CanvasCoordinates from './wrappers/CanvasCoordinates'\r\nimport CanvasCoordinatesSelection from './wrappers/CanvasCoordinatesSelection'\r\nimport DrawCircleAnim from './tasks/DrawCircleAnim'\r\nimport DrawCrossAnim from './tasks/DrawCrossAnim'\r\nimport { read } from 'fs';\r\nimport { throws } from 'assert';\r\n\r\nclass Game {\r\n\r\n    constructor(gridSize, difficulty) {\r\n        this.missPlay = 10;\r\n        switch (difficulty) {\r\n            case \"Easy\":\r\n                this.missPlay = 30;\r\n            case \"Medium\":\r\n                this.missPlay = 20;\r\n            case \"Hard\":\r\n                this.missPlay = 10;\r\n            case \"Impossible\":\r\n                this.missPlay = 0;\r\n        }\r\n        this.size = gridSize;\r\n        this.jumpSize = null;\r\n        this.gameState = [gridSize * gridSize];\r\n        this.turn = 0;\r\n        this.p1Symbol = (Math.random() * 2) < 1 ? \"x\" : \"o\";\r\n        this.aiTakeTurn = this.aiTakeTurn.bind(this);\r\n        this.edgeCells = [];\r\n        let num = 0;\r\n        for (let i = 0; i < this.size; i++) {\r\n            this.edgeCells.push(num);\r\n            num++;\r\n        }\r\n        num = this.size - 1;\r\n        for (let i = 0; i < this.size; i++) {\r\n            this.edgeCells.push(num);\r\n            num += this.size;\r\n        }\r\n        num = 0;\r\n        for (let i = 0; i < this.size; i++) {\r\n            this.edgeCells.push(num);\r\n            num++;\r\n        }\r\n        num = (this.size * this.size) - this.size;\r\n        for (let i = 0; i < this.size; i++) {\r\n            this.edgeCells.push(num);\r\n            num++;\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        this.setDisplayWhosTurn(\"your\");\r\n        let canv = document.getElementById(\"gamecanvas\");\r\n        let MIN_WIDTH = 0, MIN_HEIGHT = 0, MAX_WIDTH = canv.width, MAX_HEIGHT = canv.height;\r\n        let ctx = document.querySelector(\"#gamecanvas\").getContext(\"2d\");\r\n        ctx.lineWidth = (40 / this.size);\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(MIN_WIDTH, MIN_HEIGHT, MAX_WIDTH, MAX_HEIGHT);\r\n        ctx.fillStyle = 'black';\r\n        let pixelJumpSize = (MAX_WIDTH / this.size), pixelCurVert = 0, pixelCurHori = 0;\r\n        this.jumpSize = pixelJumpSize;\r\n        canv.addEventListener('click', (e) => { this.clicked(new CanvasCoordinates(e.offsetX, e.offsetY), ctx, pixelJumpSize); });\r\n        for (let i = 0; i < this.size; i++) {\r\n            pixelCurHori += pixelJumpSize;\r\n            ctx.moveTo(pixelCurHori, 0);\r\n            ctx.lineTo(pixelCurHori, MAX_HEIGHT);\r\n            ctx.stroke();\r\n        }\r\n        for (let i = 0; i < this.size; i++) {\r\n            pixelCurVert += pixelJumpSize;\r\n            ctx.moveTo(0, pixelCurVert);\r\n            ctx.lineTo(MAX_WIDTH, pixelCurVert);\r\n            ctx.stroke();\r\n        }\r\n        let pixelVert = 0, pixelHor = 0;\r\n        let firstRun = true;\r\n        for (let i = 0; i < this.size * this.size; i++) {\r\n            if (firstRun) {\r\n                pixelHor += (pixelJumpSize);\r\n                firstRun = false;\r\n            }\r\n            if ((pixelVert + pixelJumpSize) > MAX_HEIGHT) {\r\n                pixelVert = 0;\r\n                pixelHor += (pixelJumpSize);\r\n            }\r\n            let topLeftX = (pixelHor - pixelJumpSize), topLeftY = pixelVert;\r\n            pixelVert += pixelJumpSize;\r\n            let bottomRightX = pixelHor, bottomRightY = pixelVert;\r\n            this.gameState[i] = new CellState(new CanvasCoordinatesSelection(new CanvasCoordinates(topLeftX, topLeftY), new CanvasCoordinates(bottomRightX, bottomRightY)), i);\r\n        }\r\n    }\r\n\r\n    clicked(cc, ctx, jumpSize) {\r\n        if (this.turn != 0) return;\r\n        for (let i = 0; i < this.gameState.length; i++) {\r\n            let sel = this.gameState[i].getSelection();\r\n            if (sel.contains(cc)) {\r\n                let cs = this.gameState[i];\r\n                if (cs.getOwner() != null) return;\r\n                cs.claim(this.turn, this.p1Symbol, jumpSize);\r\n                let aiClaims = [], playerClaims = [];\r\n                let found = false;\r\n                for (let i = 0; i < this.gameState.length; i++) {\r\n                    if (this.gameState[i].getOwner() === 1) {\r\n                        aiClaims.push(this.gameState[i]);\r\n                        found = true;\r\n                    } else if (this.gameState[i].getOwner() == 0) {\r\n                        playerClaims.push(this.gameState[i]);\r\n                    }\r\n                }\r\n                if (!this.checkForWinCondition(playerClaims, aiClaims)) {\r\n                    this.turn = 1;\r\n                    this.setDisplayWhosTurn(\"AI's\")\r\n                    setTimeout(this.aiTakeTurn, 1500);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // missPlay should be a value from 0-100 which acts as a percentage value of which the AI will missplay\r\n    // A missplay will go strictly for win condition and not try to play defense\r\n    aiTakeTurn() {\r\n        let symbol = this.p1Symbol === \"x\" ? \"o\" : \"x\";\r\n        let rdm = Math.random() * 100;\r\n        let aiClaims = [], playerClaims = [];\r\n        let found = false;\r\n        for (let i = 0; i < this.gameState.length; i++) {\r\n            if (this.gameState[i].getOwner() === 1) {\r\n                aiClaims.push(this.gameState[i]);\r\n                found = true;\r\n            } else if (this.gameState[i].getOwner() == 0) {\r\n                playerClaims.push(this.gameState[i]);\r\n            }\r\n        }\r\n        if (!found && this.size == 3) {\r\n            if (playerClaims.length > 0) {\r\n                for (let i = 0; i < this.gameState.length; i++) {\r\n                    if (this.gameState[i].getIndex() == (Math.floor((this.size * this.size) / 2))) {\r\n                        if (this.gameState[i].getOwner() === null) {\r\n                            this.claimEndAITurn(this.gameState[i], symbol, playerClaims, aiClaims);\r\n                            return;\r\n                        } else {\r\n                            let num = Math.random() * 2 < 1 ? 0 : this.gameState.length - 1;\r\n                            this.claimEndAITurn(this.gameState[num], symbol, playerClaims, aiClaims);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this.size > 3) {\r\n                for (let i = 0; i < playerClaims.length; i++) {\r\n                    //block\r\n                    let index = playerClaims[i].getIndex();\r\n                    let top = (index - 1), bottom = (index + 1), right = (index + this.size), left = (index - this.size);\r\n                    if (this.size > 3) {\r\n                        if (this.isInBounds(top) && this.isOnSameRow(index, top) && this.isInBounds(bottom) && this.isOnSameRow(index, bottom)) {\r\n                            let topFarthest = top - 1, bottomFarthest = bottom + 1;\r\n                            if (this.isInBounds(topFarthest) && this.isOnSameRow(index, topFarthest) && this.isInBounds(bottomFarthest) && this.isOnSameRow(bottomFarthest, index)) {\r\n                                let topCS = this.findByIndex(top), bottomCS = this.findByIndex(bottom), topFarthestCS = this.findByIndex(topFarthest), bottomFarthestCS = this.findByIndex(bottomFarthest);\r\n                                if (topCS.getOwner() == 0 && bottomCS.getOwner() == 0 && topFarthestCS.getOwner() == 0 && bottomFarthestCS.getOwner() == null) {\r\n                                    this.claimEndAITurn(bottomFarthestCS, symbol, playerClaims, aiClaims);\r\n                                    return;\r\n                                }\r\n                                if (topCS.getOwner() == 0 && bottomCS.getOwner() == 0 && bottomFarthestCS.getOwner() == 0 && topFarthestCS.getOwner() == null) {\r\n                                    this.claimEndAITurn(topFarthestCS, symbol, playerClaims, aiClaims);\r\n                                    return;\r\n                                }\r\n                                if (bottomCS.getOwner() == 0 && bottomCS.getOwner() == 0 && bottomFarthestCS.getOwner() == 0 && topCS.getOwner() == null) {\r\n                                    this.claimEndAITurn(topCS, symbol, playerClaims, aiClaims);\r\n                                    return;\r\n                                }\r\n                                if (topCS.getOwner() == 0 && topFarthestCS.getOwner() == 0 && bottomFarthestCS.getOwner() == 0 && bottomCS.getOwner() == null) {\r\n                                    this.claimEndAITurn(bottomCS, symbol, playerClaims, aiClaims);\r\n                                    return;\r\n                                }\r\n                                if (bottomCS.getOwner() == 0 && bottomFarthestCS.getOwner() == 0 && topCS.getOwner() == null) {\r\n                                    this.claimEndAITurn(topCS, symbol, playerClaims, aiClaims);\r\n                                    return;\r\n                                }\r\n                                if (topCS.getOwner() == 0 && topFarthestCS.getOwner() == 0 && bottomCS.getOwner() == 0 && bottomFarthestCS.getOwner() == null) {\r\n                                    this.claimEndAITurn(bottomFarthestCS, symbol, playerClaims, aiClaims);\r\n                                    return;\r\n                                }\r\n                                if (topCS.getOwner() == 0 && bottomCS.getOwner() == 0) {\r\n                                    let topReached = false, bottomReached = false;\r\n                                    let count = 0;\r\n                                    while (!topReached) {\r\n                                        count++;\r\n                                        let space = topFarthest - count;\r\n                                        if (!this.isInBounds(space) || !this.isOnSameRow(index, space)) {\r\n                                            topReached = true;\r\n                                        }\r\n                                    }\r\n                                    let count1 = 0;\r\n                                    while (!bottomReached) {\r\n                                        count1++;\r\n                                        let space = bottomFarthest + count1;\r\n                                        if (!this.isInBounds(space) || !this.isOnSameRow(index, space)) {\r\n                                            bottomReached = true;\r\n                                        }\r\n                                    }\r\n                                    if (count > count1 && topFarthestCS.getOwner() == null) {\r\n                                        this.claimEndAITurn(topFarthestCS, symbol, playerClaims, aiClaims);\r\n                                        return;\r\n                                    } else if (count1 > count && bottomFarthestCS.getOwner() == null) {\r\n                                        this.claimEndAITurn(bottomFarthestCS, symbol, playerClaims, aiClaims);\r\n                                        return;\r\n                                    } else {\r\n                                        let cs = null;\r\n                                        if (topFarthestCS.getOwner() != null) {\r\n                                            cs = bottomFarthestCS;\r\n                                        } else if (bottomFarthestCS.getOwner() != null) {\r\n                                            cs = topFarthestCS;\r\n                                        } else {\r\n                                            cs = (Math.random() * 2) < 1 ? topFarthestCS : bottomFarthestCS;\r\n                                        }\r\n                                        if (cs.getOwner() == null) {\r\n                                            this.claimEndAITurn(cs, symbol, playerClaims, aiClaims);\r\n                                            return;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (this.isInBounds(left) && this.isInBounds(right) && !this.isHittingEdge(index) && !this.isHittingEdge(left) && !this.isHittingEdge(right)) {\r\n                            let leftFarthest = left - this.size, rightFarthest = right + this.size;\r\n                            if (this.isInBounds(leftFarthest) && this.isInBounds(rightFarthest)) {\r\n                                let leftCS = this.findByIndex(left), rightCS = this.findByIndex(right), leftFarthestCS = this.findByIndex(leftFarthest), rightFarthestCS = this.findByIndex(rightFarthest);\r\n                                if (leftCS.getOwner() == 0 && rightCS.getOwner() == 0 && leftFarthestCS.getOwner() == 0 && rightFarthestCS.getOwner() == null) {\r\n                                    this.claimEndAITurn(rightFarthestCS, symbol, playerClaims, aiClaims);\r\n                                    return;\r\n                                }\r\n                                if (leftCS.getOwner() == 0 && rightCS.getOwner() == 0 && rightFarthestCS.getOwner() == 0 && leftFarthestCS.getOwner() == null) {\r\n                                    this.claimEndAITurn(leftFarthestCS, symbol, playerClaims, aiClaims);\r\n                                    return;\r\n                                }\r\n                                if (rightCS.getOwner() == 0 && rightFarthestCS.getOwner() == 0 && leftFarthestCS.getOwner() == 0 && leftCS.getOwner() == null) {\r\n                                    this.claimEndAITurn(leftCS, symbol, playerClaims, aiClaims);\r\n                                    return;\r\n                                }\r\n                                if (leftCS.getOwner() == 0 && rightFarthestCS.getOwner() == 0 && leftFarthestCS.getOwner() == 0 && rightCS.getOwner() == null) {\r\n                                    this.claimEndAITurn(rightCS, symbol, playerClaims, aiClaims);\r\n                                    return;\r\n                                }\r\n                                if (leftCS.getOwner() == 0 && rightFarthestCS.getOwner() == 0 && rightCS.getOwner() == null) {\r\n                                    this.claimEndAITurn(rightCS, symbol, playerClaims, aiClaims);\r\n                                    return;\r\n                                }\r\n                                if (rightCS.getOwner() == 0 && leftFarthestCS.getOwner() == 0 && leftCS.getOwner() == 0) {\r\n                                    this.claimEndAITurn(leftCS, symbol, playerClaims, aiClaims);\r\n                                    return;\r\n                                }\r\n                                if (leftCS.getOwner() == 0 && rightCS.getOwner() == 0) {\r\n                                    let leftReached = false, rightReached = false;\r\n                                    let count = 0;\r\n                                    while (!leftReached) {\r\n                                        count += this.size;\r\n                                        let space = leftFarthest - count;\r\n                                        if (!this.isInBounds(space) || this.findByIndex(space).getOwner() == 0) {\r\n                                            leftReached = true;\r\n                                        }\r\n                                    }\r\n                                    let count1 = 0;\r\n                                    while (!rightReached) {\r\n                                        count1 += this.size;\r\n                                        let space = rightFarthest + count1;\r\n                                        if (!this.isInBounds(space) || this.findByIndex(space).getOwner() == 0) {\r\n                                            rightReached = true;\r\n                                        }\r\n                                    }\r\n                                    if (count > count1 && leftFarthestCS.getOwner() == null) {\r\n                                        this.claimEndAITurn(leftFarthestCS, symbol, playerClaims, aiClaims);\r\n                                        return;\r\n                                    } else if (count1 > count && rightFarthestCS.getOwner() == null) {\r\n                                        this.claimEndAITurn(rightFarthestCS, symbol, playerClaims, aiClaims);\r\n                                        return;\r\n                                    } else {\r\n                                        let cs = null;\r\n                                        if (leftFarthestCS.getOwner() != null) {\r\n                                            cs = leftFarthestCS;\r\n                                        } else if (rightFarthestCS.getOwner() != null) {\r\n                                            cs = rightFarthestCS;\r\n                                        } else {\r\n                                            cs = (Math.random() * 2) < 1 ? leftFarthestCS : rightFarthestCS;\r\n                                        }\r\n                                        if (cs.getOwner() == null) {\r\n                                            this.claimEndAITurn(cs, symbol, playerClaims, aiClaims);\r\n                                            return;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            let scores = [];\r\n            for (let i = 0; i < aiClaims.length; i++) {\r\n                let index = aiClaims[i].getIndex();\r\n                let top = (index - 1), bottom = (index + 1), right = (index + this.size), left = (index - this.size), topLeft = (top - this.size), topRight = (top + this.size), bottomLeft = (bottom - this.size), bottomRight = (bottom + this.size);\r\n                if (this.size > 3) {\r\n                    if (this.isInBounds(top) && this.isInBounds(bottom) && this.isOnSameRow(index, top) && this.isOnSameRow(index, bottom)) {\r\n                        let topFarthest = top - 1, bottomFarthest = bottom + 1;\r\n                        if (this.isInBounds(topFarthest) && this.isInBounds(bottomFarthest)) {\r\n                            let topFarthestCS = this.findByIndex(topFarthest), bottomFarthestCS = this.findByIndex(bottomFarthest), topCS = this.findByIndex(top), bottomCS = this.findByIndex(bottom);\r\n                            let score = 0;\r\n                            if (topFarthestCS.getOwner() != null) score += topFarthestCS.getOwner();\r\n                            if (bottomFarthestCS.getOwner() != null) score += bottomFarthestCS.getOwner();\r\n                            if (topCS.getOwner() != null) score += topCS.getOwner();\r\n                            if (bottomCS.getOwner() != null) score += bottomCS.getOwner();\r\n                            if (topFarthestCS.getOwner() == 1 && topCS.getOwner() == 1) {\r\n                                if (bottomCS.getOwner() == 1) {\r\n                                    if (bottomFarthestCS.getOwner() == null) {\r\n                                        scores.push([score, bottomFarthestCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else if (bottomFarthestCS.getOwner() == 1) {\r\n                                    if (bottomCS.getOwner() == null) {\r\n                                        scores.push([score, bottomCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else {\r\n                                    let cs = Math.random() * 2 < 1 ? bottomCS : bottomFarthestCS;\r\n                                    if (cs.getOwner() == null) {\r\n                                        scores.push([score, cs]);\r\n                                        continue;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (bottomCS.getOwner() == 1 && bottomFarthestCS.getOwner() == 1) {\r\n                                if (topCS.getOwner() == 1) {\r\n                                    if (topFarthestCS.getOwner() == null) {\r\n                                        scores.push([score, topFarthestCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else if (topFarthestCS.getOwner() == 1) {\r\n                                    if (topCS.getOwner() == null) {\r\n                                        scores.push([score, topCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else {\r\n                                    let cs = Math.random() * 2 < 1 ? topCS : topFarthestCS;\r\n                                    if (cs.getOwner() == null) {\r\n                                        scores.push([score, cs]);\r\n                                        continue;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (bottomCS.getOwner() == 1 && topCS.getOwner() == 1) {\r\n                                if (topFarthestCS.getOwner() == 1) {\r\n                                    if (bottomFarthestCS.getOwner() == null) {\r\n                                        scores.push([score, bottomFarthestCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else if (bottomFarthestCS.getOwner() == 1) {\r\n                                    if (topFarthestCS.getOwner() == null) {\r\n                                        scores.push([score, topFarthestCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else {\r\n                                    let cs = Math.random() * 2 < 1 ? bottomFarthestCS : topFarthestCS;\r\n                                    if (cs.getOwner() == null) {\r\n                                        scores.push([score, cs]);\r\n                                        continue;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (topFarthestCS.getOwner() == 1 && bottomFarthestCS.getOwner() == 1) {\r\n                                if (topCS.getOwner() == 1) {\r\n                                    if (bottomCS.getOwner() == null) {\r\n                                        scores.push([score, bottomCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else if (bottomCS.getOwner() == 1) {\r\n                                    if (topCS.getOwner() == null) {\r\n                                        scores.push([score, topCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else {\r\n                                    let cs = Math.random() * 2 < 1 ? topCS : bottomCS;\r\n                                    if (cs.getOwner() == null) {\r\n                                        scores.push([score, cs]);\r\n                                        continue;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this.isInBounds(topLeft) && this.isInBounds(bottomRight) && !this.isHittingEdge(index)) {\r\n                        let topLeftFarthest = (topLeft - 1) - this.size, bottomRightFarthest = (bottom + 1) + this.size;\r\n                        if (this.isInBounds(topLeftFarthest) && this.isInBounds(bottomRightFarthest) && !this.isHittingEdge(topLeft) && !this.isHittingEdge(topRight)) {\r\n                            let topLeftFarthestCS = this.findByIndex(topLeftFarthest), bottomRightFarthestCS = this.findByIndex(bottomRightFarthest), topLeftCS = this.findByIndex(topLeft), bottomRightCS = this.findByIndex(bottomRight);\r\n                            let score = 0;\r\n                            if (topLeftFarthestCS.getOwner() != null) score += topLeftFarthestCS.getOwner();\r\n                            if (bottomRightFarthestCS.getOwner() != null) score += bottomRightFarthestCS.getOwner();\r\n                            if (topLeftCS.getOwner() != null) score += topLeftCS.getOwner();\r\n                            if (bottomRightCS.getOwner() != null) score += bottomRightCS.getOwner();\r\n                            if (topLeftFarthestCS.getOwner() == 1 && topLeftCS.getOwner() == 1) {\r\n                                if (bottomRightCS.getOwner() == 1) {\r\n                                    if (bottomRightFarthestCS.getOwner() == null) {\r\n                                        scores.push([score, bottomRightFarthestCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else if (bottomRightFarthestCS.getOwner() == 1) {\r\n                                    if (bottomRightCS.getOwner() == null) {\r\n                                        scores.push([score, bottomRightCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else {\r\n                                    let cs = Math.random() * 2 < 1 ? bottomRightCS : bottomRightFarthestCS;\r\n                                    if (cs.getOwner() == null) {\r\n                                        scores.push([score, cs]);\r\n                                        continue;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (bottomRightCS.getOwner() == 1 && bottomRightFarthestCS.getOwner() == 1) {\r\n                                if (topLeftCS.getOwner() == 1) {\r\n                                    if (topLeftFarthestCS.getOwner() == null) {\r\n                                        scores.push([score, topLeftFarthestCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else if (topLeftFarthestCS.getOwner() == 1) {\r\n                                    if (topLeftCS.getOwner() == null) {\r\n                                        scores.push([score, topLeftCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else {\r\n                                    let cs = Math.random() * 2 < 1 ? topLeftCS : topLeftFarthestCS;\r\n                                    if (cs.getOwner() == null) {\r\n                                        scores.push([score, cs]);\r\n                                        continue;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (bottomRightCS.getOwner() == 1 && topLeftCS.getOwner() == 1) {\r\n                                if (topLeftFarthestCS.getOwner() == 1) {\r\n                                    if (bottomRightFarthestCS.getOwner() == null) {\r\n                                        scores.push([score, bottomRightFarthestCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else if (bottomRightFarthestCS.getOwner() == 1) {\r\n                                    if (topLeftFarthestCS.getOwner() == null) {\r\n                                        scores.push([score, topLeftFarthestCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else {\r\n                                    let cs = Math.random() * 2 < 1 ? bottomRightFarthestCS : topLeftFarthestCS;\r\n                                    if (cs.getOwner() == null) {\r\n                                        scores.push([score, cs]);\r\n                                        continue;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (topLeftFarthestCS.getOwner() == 1 && bottomRightFarthestCS.getOwner() == 1) {\r\n                                if (topLeftCS.getOwner() == 1) {\r\n                                    if (bottomRightCS.getOwner() == null) {\r\n                                        scores.push([score, bottomRightCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else if (bottomRightCS.getOwner() == 1) {\r\n                                    if (topLeftCS.getOwner() == null) {\r\n                                        scores.push([score, topLeftCS]);\r\n                                        continue;\r\n                                    }\r\n                                } else {\r\n                                    let cs = Math.random() * 2 < 1 ? topLeftCS : bottomRightCS;\r\n                                    if (cs.getOwner() == null) {\r\n                                        scores.push([score, cs]);\r\n                                        continue;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.isInBounds(left) && this.isInBounds(right) && !this.isHittingEdge(index)) {\r\n                    let leftFarthest = left - this.size, rightFarthest = right + this.size;\r\n                    if (this.isInBounds(leftFarthest) && this.isInBounds(rightFarthest) && !this.isHittingEdge(left) && !this.isHittingEdge(right)) {\r\n                        let leftFarthestCS = this.findByIndex(leftFarthest), rightFarthestCS = this.findByIndex(rightFarthest), leftCS = this.findByIndex(left), rightCS = this.findByIndex(right);\r\n                        let score = 0;\r\n                        if (leftFarthestCS.getOwner() != null) score += leftFarthestCS.getOwner();\r\n                        if (rightFarthestCS.getOwner() != null) score += rightFarthestCS.getOwner();\r\n                        if (leftCS.getOwner() != null) score += leftCS.getOwner();\r\n                        if (rightCS.getOwner() != null) score += rightCS.getOwner();\r\n                        if (leftFarthestCS.getOwner() == 1 && leftCS.getOwner() == 1) {\r\n                            if (rightCS.getOwner() == 1) {\r\n                                if (rightFarthestCS.getOwner() == null) {\r\n                                    scores.push([score, rightFarthestCS]);\r\n                                    continue;\r\n                                }\r\n                            } else if (rightFarthestCS.getOwner() == 1) {\r\n                                if (rightCS.getOwner() == null) {\r\n                                    scores.push([score, rightCS]);\r\n                                    continue;\r\n                                }\r\n                            } else {\r\n                                let cs = Math.random() * 2 < 1 ? rightCS : rightFarthestCS;\r\n                                if (cs.getOwner() == null) {\r\n                                    scores.push([score, cs]);\r\n                                    continue;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (rightCS.getOwner() == 1 && rightFarthestCS.getOwner() == 1) {\r\n                            if (leftCS.getOwner() == 1) {\r\n                                if (leftFarthestCS.getOwner() == null) {\r\n                                    scores.push([score, leftFarthestCS]);\r\n                                    continue;\r\n                                }\r\n                            } else if (leftFarthestCS.getOwner() == 1) {\r\n                                if (leftCS.getOwner() == null) {\r\n                                    scores.push([score, leftCS]);\r\n                                    continue;\r\n                                }\r\n                            } else {\r\n                                let cs = Math.random() * 2 < 1 ? leftCS : leftFarthestCS;\r\n                                if (cs.getOwner() == null) {\r\n                                    scores.push([score, cs]);\r\n                                    continue;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (rightCS.getOwner() == 1 && leftCS.getOwner() == 1) {\r\n                            if (leftFarthestCS.getOwner() == 1) {\r\n                                if (rightFarthestCS.getOwner() == null) {\r\n                                    scores.push([score, rightFarthestCS]);\r\n                                    continue;\r\n                                }\r\n                            } else if (rightFarthestCS.getOwner() == 1) {\r\n                                if (leftFarthestCS.getOwner() == null) {\r\n                                    scores.push([score, leftFarthestCS]);\r\n                                    continue;\r\n                                }\r\n                            } else {\r\n                                let cs = Math.random() * 2 < 1 ? rightFarthestCS : leftFarthestCS;\r\n                                if (cs.getOwner() == null) {\r\n                                    scores.push([score, cs]);\r\n                                    continue;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (leftFarthestCS.getOwner() == 1 && rightFarthestCS.getOwner() == 1) {\r\n                            if (leftCS.getOwner() == 1) {\r\n                                if (rightCS.getOwner() == null) {\r\n                                    scores.push([score, rightCS]);\r\n                                    continue;\r\n                                }\r\n                            } else if (rightCS.getOwner() == 1) {\r\n                                if (leftCS.getOwner() == null) {\r\n                                    scores.push([score, leftCS]);\r\n                                    continue;\r\n                                }\r\n                            } else {\r\n                                let cs = Math.random() * 2 < 1 ? leftCS : rightCS;\r\n                                if (cs.getOwner() == null) {\r\n                                    scores.push([score, cs]);\r\n                                    continue;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                let currentHighest = null;\r\n                for (let i = 0; i < scores.length; i++) {\r\n                    let score = scores[i][0];\r\n                    if (currentHighest != null) {\r\n                        if (score > currentHighest[0]) currentHighest = scores[i];\r\n                    } else currentHighest = scores[i];\r\n                }\r\n                if (currentHighest != null) {\r\n                    this.claimEndAITurn(currentHighest[1], symbol, playerClaims, aiClaims);\r\n                    return;\r\n                }\r\n                if (this.isInBounds(top) && this.isInBounds(bottom) && this.isOnSameRow(index, top) && this.isOnSameRow(index, bottom)) {\r\n                    let topCS = this.findByIndex(top), bottomCS = this.findByIndex(bottom);\r\n                    if (topCS.getOwner() == 1 && bottomCS.getOwner() == null) {\r\n                        this.claimEndAITurn(bottomCS, symbol, playerClaims, aiClaims);\r\n                        console.log(\"okTEST4\");\r\n                        return;\r\n                    }\r\n                    if (bottomCS.getOwner() == 1 && topCS.getOwner() == null) {\r\n                        this.claimEndAITurn(topCS, symbol, playerClaims, aiClaims);\r\n                        console.log(\"okTEST3\");\r\n                        return;\r\n                    }\r\n                }\r\n                if (this.isInBounds(right) && this.isInBounds(left)) {\r\n                    let leftCS = this.findByIndex(left), rightCS = this.findByIndex(right);\r\n                    if (leftCS.getOwner() == 1 && rightCS.getOwner() == null) {\r\n                        console.log(\"okTEST1\");\r\n                        this.claimEndAITurn(rightCS, symbol, playerClaims, aiClaims);\r\n                        return;\r\n                    }\r\n                    if (rightCS.getOwner() == 1 && leftCS.getOwner() == null) {\r\n                        console.log(\"okTEST2\");\r\n                        this.claimEndAITurn(leftCS, symbol, playerClaims, aiClaims);\r\n                        return;\r\n                    }\r\n                }\r\n                if (this.isInBounds(topLeft) && this.isInBounds(bottomRight) && !this.isHittingEdge(index)) {\r\n                    let topLeftCS = this.findByIndex(topLeft), bottomRightCS = this.findByIndex(bottomRight);\r\n                    if (topLeftCS.getOwner() == 1 && bottomRightCS.getOwner() == null) {\r\n                        this.claimEndAITurn(bottomRightCS, symbol, playerClaims, aiClaims);\r\n                        console.log(\"okTEST5\");\r\n                        return;\r\n                    }\r\n                    if (bottomRightCS.getOwner() == 1 && topLeftCS.getOwner() == null) {\r\n                        this.claimEndAITurn(topLeftCS, symbol, playerClaims, aiClaims);\r\n                        console.log(\"okTEST6\");\r\n                        return;\r\n                    }\r\n                }\r\n                if (this.isInBounds(topRight) && this.isInBounds(bottomLeft) && !this.isHittingEdge(index)) {\r\n                    let topRightCS = this.findByIndex(topRight), bottomLeftCS = this.findByIndex(bottomLeft);\r\n                    if (topRightCS.getOwner() == 1 && bottomLeftCS.getOwner() == null) {\r\n                        this.claimEndAITurn(bottomLeftCS, symbol, playerClaims, aiClaims);\r\n                        console.log(\"okTEST7\");\r\n                        return;\r\n                    }\r\n                    if (bottomLeftCS.getOwner() == 1 && topRightCS.getOwner() == null) {\r\n                        this.claimEndAITurn(topRightCS, symbol, playerClaims, aiClaims);\r\n                        console.log(\"okTEST8\");\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            for (let i = 0; i < playerClaims.length; i++) {\r\n                let index = playerClaims[i].getIndex();\r\n                let top = (index - 1), bottom = (index + 1), right = (index + this.size), left = (index - this.size);\r\n                if (this.isInBounds(top) && this.isOnSameRow(index, top)) {\r\n                    if (this.isInBounds(bottom) && this.isOnSameRow(bottom, index)) {\r\n                        let topCS = this.findByIndex(top), bottomCS = this.findByIndex(bottom);\r\n                        if (topCS.getOwner() == 0 && bottomCS.getOwner() == null) {\r\n                            this.claimEndAITurn(bottomCS, symbol, playerClaims, aiClaims);\r\n                            console.log(\"okTEST1\");\r\n                            return;\r\n                        } else if (bottomCS.getOwner() == 0 && topCS.getOwner() == null) {\r\n                            this.claimEndAITurn(topCS, symbol, playerClaims, aiClaims);\r\n                            console.log(\"okTEST2\");\r\n                            return;\r\n                        }\r\n                    }\r\n                    let farthest = (top - 1);\r\n                    if (this.isInBounds(farthest) && this.isOnSameRow(top, farthest)) {\r\n                        let farthestCS = this.findByIndex(farthest), topCS = this.findByIndex(top);\r\n                        if (topCS.getOwner() == 0) {\r\n                            if (farthestCS.getOwner() == null) {\r\n                                this.claimEndAITurn(farthestCS, symbol, playerClaims, aiClaims);\r\n                                console.log(\"okTEST3\");\r\n                                return;\r\n                            }\r\n                        } else if (farthestCS.getOwner() == 0) {\r\n                            if (topCS.getOwner() == null) {\r\n                                this.claimEndAITurn(topCS, symbol, playerClaims, aiClaims);\r\n                                console.log(\"okTEST4\");\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.isInBounds(bottom) && this.isOnSameRow(index, bottom)) {\r\n                    let farthest = (bottom + 1);\r\n                    if (this.isInBounds(farthest) && this.isOnSameRow(bottom, farthest)) {\r\n                        let farthestCS = this.findByIndex(farthest), bottomCS = this.findByIndex(bottom);\r\n                        if (bottomCS.getOwner() == 0) {\r\n                            if (farthestCS.getOwner() == null) {\r\n                                this.claimEndAITurn(farthestCS, symbol, playerClaims, aiClaims);\r\n                                console.log(\"okTEST5\");\r\n                                return;\r\n                            }\r\n                        } else if (farthestCS.getOwner() == 0) {\r\n                            if (bottomCS.getOwner() == null) {\r\n                                this.claimEndAITurn(bottomCS, symbol, playerClaims, aiClaims);\r\n                                console.log(\"okTEST6\");\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.isInBounds(right)) {\r\n                    if (this.isInBounds(left)) {\r\n                        let rightCS = this.findByIndex(right), leftCS = this.findByIndex(left);\r\n                        if (rightCS.getOwner() == 0 && leftCS.getOwner() == null) {\r\n                            this.claimEndAITurn(leftCS, symbol, playerClaims, aiClaims);\r\n                            console.log(\"okTEST7\");\r\n                            return;\r\n                        } else if (leftCS.getOwner() == 0 && rightCS.getOwner() == null) {\r\n                            this.claimEndAITurn(rightCS, symbol, playerClaims, aiClaims);\r\n                            console.log(\"okTEST8\");\r\n                            return;\r\n                        }\r\n                    }\r\n                    let farthest = (right + this.size);\r\n                    if (this.isInBounds(farthest)) {\r\n                        let farthestCS = this.findByIndex(farthest), rightCS = this.findByIndex(right);\r\n                        if (rightCS.getOwner() == 0) {\r\n                            if (farthestCS.getOwner() == null) {\r\n                                console.log(\"okTEST9\");\r\n                                this.claimEndAITurn(farthestCS, symbol, playerClaims, aiClaims);\r\n                                return;\r\n                            }\r\n                        } else if (farthestCS.getOwner() == 0) {\r\n                            if (rightCS.getOwner() == null) {\r\n                                console.log(\"okTEST10\");\r\n                                this.claimEndAITurn(rightCS, symbol, playerClaims, aiClaims);\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.isInBounds(left)) {\r\n                    let farthest = (left - this.size);\r\n                    if (this.isInBounds(farthest)) {\r\n                        let farthestCS = this.findByIndex(farthest), leftCS = this.findByIndex(left);\r\n                        if (leftCS.getOwner() == 0) {\r\n                            if (farthestCS.getOwner() == null) {\r\n                                console.log(\"okTEST11\");\r\n                                this.claimEndAITurn(farthestCS, symbol, playerClaims, aiClaims);\r\n                                return;\r\n                            }\r\n                        } else if (farthestCS.getOwner() == 0) {\r\n                            if (leftCS.getOwner() == null) {\r\n                                console.log(\"okTEST12\");\r\n                                this.claimEndAITurn(leftCS, symbol, playerClaims, aiClaims);\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                let topLeft = top - this.size;\r\n                let bottomRight = bottom + this.size;\r\n                if (this.isInBounds(topLeft) && this.isInBounds(bottomRight) && !this.isHittingEdge(index)) {\r\n                    let topLeftCS = this.findByIndex(topLeft), bottomRightCS = this.findByIndex(bottomRight);\r\n                    if (topLeftCS.getOwner() == 0) {\r\n                        if (bottomRightCS.getOwner() == null) {\r\n                            console.log(\"okTEST13\");\r\n                            this.claimEndAITurn(bottomRightCS, symbol, playerClaims, aiClaims);\r\n                            return;\r\n                        }\r\n                    } else if (bottomRightCS.getOwner() == 0) {\r\n                        if (topLeftCS.getOwner() == null) {\r\n                            console.log(\"okTEST14\");\r\n                            this.claimEndAITurn(topLeftCS, symbol, playerClaims, aiClaims);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                let topRight = top + this.size;\r\n                let bottomLeft = bottom - this.size;\r\n                if (this.isInBounds(topRight) && this.isInBounds(bottomLeft) && !this.isHittingEdge(index)) {\r\n                    let topRightCS = this.findByIndex(topRight), bottomLeftCS = this.findByIndex(bottomLeft);\r\n                    if (topRightCS.getOwner() == 0) {\r\n                        if (bottomLeftCS.getOwner() == null) {\r\n                            console.log(\"okTEST15\");\r\n                            this.claimEndAITurn(bottomLeftCS, symbol, playerClaims, aiClaims);\r\n                            return;\r\n                        }\r\n                    } else if (bottomLeftCS.getOwner() == 0) {\r\n                        if (topRightCS.getOwner() == null) {\r\n                            console.log(\"okTEST16\");\r\n                            this.claimEndAITurn(topRightCS, symbol, playerClaims, aiClaims);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < playerClaims.length; i++) {\r\n            let index = playerClaims[i].getIndex();\r\n            let top = (index - 1), bottom = (index + 1), right = (index + this.size), left = (index - this.size);\r\n            if (this.isInBounds(top)) {\r\n                let topCS = this.findByIndex(top);\r\n                if (topCS.getOwner() == null) {\r\n                    console.log(\"okTES1T\");\r\n                    this.claimEndAITurn(topCS, symbol, playerClaims, aiClaims);\r\n                    return;\r\n                }\r\n            }\r\n            if (this.isInBounds(bottom)) {\r\n                let bottomCS = this.findByIndex(bottom);\r\n                if (bottomCS.getOwner() == null) {\r\n                    this.claimEndAITurn(bottomCS, symbol, playerClaims, aiClaims);\r\n                    return;\r\n                }\r\n            }\r\n            if (this.isInBounds(right)) {\r\n                let rightCS = this.findByIndex(right);\r\n                if (rightCS.getOwner() == null) {\r\n                    this.claimEndAITurn(rightCS, symbol, playerClaims, aiClaims);\r\n                    return;\r\n                }\r\n            }\r\n            if (this.isInBounds(left)) {\r\n                let leftCS = this.findByIndex(left);\r\n                if (leftCS.getOwner() == null) {\r\n                    this.claimEndAITurn(leftCS, symbol, playerClaims, aiClaims);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    claimEndAITurn(cs, symbol, playerClaims, aiClaims) {\r\n        console.log(Math.random() + \"claimEndAITurn\" + cs.getIndex());\r\n        cs.claim(this.turn, symbol, this.jumpSize);\r\n        if (!this.checkForWinCondition(playerClaims, aiClaims)) {\r\n            this.turn = 0;\r\n            this.setDisplayWhosTurn(\"your\")\r\n        }\r\n    }\r\n\r\n    checkForWinCondition(playerClaims, aiClaims) {\r\n        let emptyCell = false;\r\n        for (let i = 0; i < this.gameState.length; i++) {\r\n            if (this.gameState[i].getOwner() == null) {\r\n                emptyCell = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!emptyCell) {\r\n            this.setDisplayWhosWon(\"TIE\");\r\n            return true;\r\n        }\r\n        for (let i = 0; i < playerClaims.length; i++) {\r\n            let index = playerClaims[i].getIndex();\r\n            let top = (index - 1), bottom = (index + 1), right = (index + this.size), left = (index - this.size);\r\n            if (this.isInBounds(top) && this.isInBounds(bottom) && this.isOnSameRow(index, top) && this.isOnSameRow(index, bottom)) {\r\n                let topCS = this.findByIndex(top), bottomCS = this.findByIndex(bottom);\r\n                if (topCS.getOwner() == 0 && bottomCS.getOwner() == 0) {\r\n                    if (this.size > 3) {\r\n                        let farthestTop = (top - 1), farthestBottom = (bottom + 1);\r\n                        if (this.isInBounds(farthestBottom) && this.isInBounds(farthestTop) && this.isOnSameRow(index, farthestTop) && this.isOnSameRow(index, farthestBottom)) {\r\n                            let farthestBottomCS = this.findByIndex(farthestBottom), farthestTopCS = this.findByIndex(farthestTop);\r\n                            if (farthestBottomCS.getOwner() == 0 && farthestTopCS.getOwner() == 0) {\r\n                                let csList = [topCS, bottomCS, farthestBottomCS, farthestTopCS, playerClaims[i]];\r\n                                this.setDisplayWhosWon(\"you\", csList)\r\n                                console.log(\"WIN 1 size>3\")\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let csList = [topCS, bottomCS, playerClaims[i]];\r\n                        this.setDisplayWhosWon(\"you\", csList)\r\n                        console.log(\"WIN 1\")\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            if (this.isInBounds(left) && this.isInBounds(right)) {\r\n                let leftCS = this.findByIndex(left), rightCS = this.findByIndex(right);\r\n                if (leftCS.getOwner() == 0 && rightCS.getOwner() == 0 && !this.isHittingEdge(index)) {\r\n                    if (this.size > 3) {\r\n                        let farthestLeft = (left - this.size), farthestRight = (right + this.size);\r\n                        if (this.isInBounds(farthestLeft) && this.isInBounds(farthestRight) && !this.isHittingEdge(left) && !this.isHittingEdge(right)) {\r\n                            let farthestLeftCS = this.findByIndex(farthestLeft), farthestRightCS = this.findByIndex(farthestRight);\r\n                            if (farthestLeftCS.getOwner() == 0 && farthestRightCS.getOwner() == 0) {\r\n                                let csList = [farthestLeftCS, farthestRightCS, playerClaims[i]];\r\n                                this.setDisplayWhosWon(\"you\", csList)\r\n                                console.log(\"WIN 2 size>3\")\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let csList = [leftCS, rightCS, playerClaims[i]];\r\n                        this.setDisplayWhosWon(\"you\", csList)\r\n                        console.log(\"WIN 2\")\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            let topRight = top + this.size;\r\n            let bottomLeft = bottom - this.size;\r\n            if (this.isOnSameRow(index, top) && this.isOnSameRow(index, bottom) && this.isInBounds(topRight) && this.isInBounds(bottomLeft)) {\r\n                let topRightCS = this.findByIndex(topRight), bottomLeftCS = this.findByIndex(bottomLeft);\r\n                if (!this.isHittingEdge(index) && topRightCS.getOwner() == 0 && bottomLeftCS.getOwner() == 0) {\r\n                    if (this.size > 3) {\r\n                        let farthestTopRight = (topRight - 1) + this.size, farthestBottomLeft = (bottomLeft + 1) - this.size;\r\n                        if (this.isInBounds(farthestTopRight) && this.isInBounds(farthestBottomLeft) && !this.isHittingEdge(topRight) && !this.isHittingEdge(bottomLeft)) {\r\n                            let farthestTopRightCS = this.findByIndex(farthestTopRight), farthestBottomLeftCS = this.findByIndex(farthestBottomLeft);\r\n                            if (farthestTopRightCS.getOwner() == 0 && farthestBottomLeftCS.getOwner() == 0) {\r\n                                let csList = [topRightCS, bottomLeftCS, playerClaims[i]];\r\n                                this.setDisplayWhosWon(\"you\", csList)\r\n                                console.log(\"WIN 6 size>3\")\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let csList = [topRightCS, bottomLeftCS, playerClaims[i]];\r\n                        this.setDisplayWhosWon(\"you\", csList)\r\n                        console.log(\"WIN 6\")\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            let topLeft = top - this.size;\r\n            let bottomRight = bottom + this.size;\r\n            if (this.isInBounds(topLeft) && this.isInBounds(bottomRight)) {\r\n                let topLeftCS = this.findByIndex(topLeft), bottomRightCS = this.findByIndex(bottomRight);\r\n                if (!this.isHittingEdge(index) && topLeftCS.getOwner() == 0 && bottomRightCS.getOwner() == 0) {\r\n                    if (this.size > 3) {\r\n                        let farthestTopLeft = (topLeft - 1) - this.size, farthestBottomRight = (bottomRight + 1) + this.size;\r\n                        if (this.isInBounds(farthestTopLeft) && this.isInBounds(farthestBottomRight) && !this.isHittingEdge(bottomRight) && !this.isHittingEdge(topLeft)) {\r\n                            let farthestTopLeftCS = this.findByIndex(farthestTopLeft), farthestBottomRightCS = this.findByIndex(farthestBottomRight);\r\n                            if (farthestTopLeftCS.getOwner() == 0 && farthestBottomRightCS.getOwner() == 0) {\r\n                                let csList = [topLeftCS, bottomRightCS, farthestBottomRightCS, farthestTopLeftCS, playerClaims[i]];\r\n                                this.setDisplayWhosWon(\"you\", csList)\r\n                                console.log(\"WIN 8 size>3\")\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let csList = [topLeftCS, bottomRightCS, playerClaims[i]];\r\n                        this.setDisplayWhosWon(\"you\", csList)\r\n                        console.log(\"WIN 8\")\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < aiClaims.length; i++) {\r\n            let index = aiClaims[i].getIndex();\r\n            let top = (index - 1), bottom = (index + 1), right = (index + this.size), left = (index - this.size);\r\n            if (this.isInBounds(top) && this.isInBounds(bottom) && this.isOnSameRow(index, bottom) && this.isOnSameRow(index, top)) {\r\n                let topCS = this.findByIndex(top), bottomCS = this.findByIndex(bottom);\r\n                if (topCS.getOwner() == 1 && bottomCS.getOwner() == 1) {\r\n                    if (this.size > 3) {\r\n                        let farthestTop = (top - 1), farthestBottom = (bottom + 1);\r\n                        if (this.isInBounds(farthestBottom) && this.isInBounds(farthestTop) && this.isOnSameRow(index, farthestBottom) && this.isOnSameRow(index, farthestTop)) {\r\n                            let farthestBottomCS = this.findByIndex(farthestBottom), farthestTopCS = this.findByIndex(farthestTop);\r\n                            if (farthestBottomCS.getOwner() == 1 && farthestTopCS.getOwner() == 1) {\r\n                                let csList = [topCS, bottomCS, farthestBottomCS, farthestTopCS, aiClaims[i]];\r\n                                this.setDisplayWhosWon(\"AI\", csList);\r\n                                console.log(\"WIN 3 SIZE>3\")\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let csList = [topCS, bottomCS, aiClaims[i]];\r\n                        this.setDisplayWhosWon(\"AI\", csList);\r\n                        console.log(\"WIN 3\")\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            if (this.isInBounds(left) && this.isInBounds(right)) {\r\n                let leftCS = this.findByIndex(left), rightCS = this.findByIndex(right);\r\n                if (leftCS.getOwner() == 1 && rightCS.getOwner() == 1) {\r\n                    if (this.size > 3) {\r\n                        let farthestLeft = (left - this.size), farthestRight = (right + this.size);\r\n                        if (this.isInBounds(farthestLeft) && this.isInBounds(farthestRight) && !this.isHittingEdge(right) && !this.isHittingEdge(left) && !this.isHittingEdge(index)) {\r\n                            let farthestLeftCS = this.findByIndex(farthestLeft), farthestRightCS = this.findByIndex(farthestRight);\r\n                            if (farthestLeftCS.getOwner() == 1 && farthestRightCS.getOwner() == 1) {\r\n                                let csList = [leftCS, rightCS, farthestLeftCS, farthestRightCS, aiClaims[i]];\r\n                                this.setDisplayWhosWon(\"AI\", csList);\r\n                                console.log(\"WIN 4 SIZE>3\")\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let csList = [leftCS, rightCS, aiClaims[i]];\r\n                        this.setDisplayWhosWon(\"AI\", csList);\r\n                        console.log(\"WIN 4\")\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            let topLeft = top - this.size;\r\n            let bottomRight = bottom + this.size;\r\n            if (this.isInBounds(topLeft) && this.isInBounds(bottomRight)) {\r\n                let topLeftCS = this.findByIndex(topLeft), bottomRightCS = this.findByIndex(bottomRight);\r\n                if (topLeftCS.getOwner() == 1 && bottomRightCS.getOwner() == 1 && !this.isHittingEdge(index)) {\r\n                    if (this.size > 3) {\r\n                        let farthestTopLeft = (topLeft - 1) - this.size, farthestBottomRight = (bottomRight + 1) + this.size;\r\n                        if (this.isInBounds(farthestTopLeft) && this.isInBounds(farthestBottomRight) && !this.isHittingEdge(bottomRight) && !this.isHittingEdge(topLeft)) {\r\n                            let farthestTopLeftCS = this.findByIndex(farthestTopLeft), farthestBottomRightCS = this.findByIndex(farthestBottomRight);\r\n                            if (farthestTopLeftCS.getOwner() == 1 && farthestBottomRightCS.getOwner() == 1) {\r\n                                let csList = [topLeftCS, bottomRightCS, farthestBottomRightCS, farthestTopLeftCS, aiClaims[i]];\r\n                                this.setDisplayWhosWon(\"AI\", csList);\r\n                                console.log(\"WIN 5 SIZE>3\")\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let csList = [topLeftCS, bottomRightCS, aiClaims[i]];\r\n                        this.setDisplayWhosWon(\"AI\", csList)\r\n                        console.log(\"WIN 5\")\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            let topRight = top + this.size;\r\n            let bottomLeft = bottom - this.size;\r\n            if (this.isInBounds(bottomLeft) && this.isInBounds(topRight) && !this.isHittingEdge(index)) {\r\n                let topRightCS = this.findByIndex(topRight), bottomLeftCS = this.findByIndex(bottomLeft);\r\n                if (topRightCS.getOwner() == 1 && bottomLeftCS.getOwner() == 1 && !this.isHittingEdge(index)) {\r\n                    if (this.size > 3) {\r\n                        let farthestTopRight = (topRight - 1) + this.size, farthestBottomLeft = (bottomLeft + 1) - this.size;\r\n                        if (this.isInBounds(farthestTopRight) && this.isInBounds(farthestBottomLeft) && !this.isHittingEdge(topRight) && !this.isHittingEdge(bottomLeft)) {\r\n                            let farthestTopRightCS = this.findByIndex(farthestTopRight), farthestBottomLeftCS = this.findByIndex(farthestBottomLeft);\r\n                            if (farthestTopRightCS.getOwner() == 1 && farthestBottomLeftCS.getOwner() == 1) {\r\n                                let csList = [topRightCS, bottomLeftCS, farthestBottomLeftCS, farthestTopRightCS, aiClaims[i]];\r\n                                this.setDisplayWhosWon(\"AI\", csList);\r\n                                console.log(\"WIN 7 SIZE>3\");\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let csList = [topRightCS, bottomLeftCS, aiClaims[i]];\r\n                        this.setDisplayWhosWon(\"AI\", csList);\r\n                        console.log(\"WIN 7\");\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isInBounds(index) {\r\n        return index >= 0 && index < (this.size * this.size);\r\n    }\r\n\r\n    isOnSameRow(i1, i2) {\r\n        return Math.floor(i1 / this.size) == Math.floor(i2 / this.size);\r\n    }\r\n\r\n    isHittingEdge(i1) {\r\n        for (let i = 0; i < this.edgeCells.length; i++) {\r\n            if (i1 == this.edgeCells[i]) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isOnSameRowHorizontally(i1, i2) {\r\n        let num = 0;\r\n        let foundEnd = false;\r\n        while (!foundEnd) {\r\n            num += this.size;\r\n            let i1NextRow = i1 + num;\r\n            if (!this.isInBounds(i1NextRow)) foundEnd = true;\r\n            if (i1NextRow == i2) return true;\r\n        }\r\n        foundEnd = false;\r\n        num = 0;\r\n        while (!foundEnd) {\r\n            num -= this.size;\r\n            let i1PrevRow = i1 - num;\r\n            if (!this.isInBounds(i1PrevRow)) foundEnd = true;\r\n            if (i1PrevRow == i2) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findByIndex(index) {\r\n        for (let i = 0; i < this.gameState.length; i++) {\r\n            if (this.gameState[i].getIndex() == index) return this.gameState[i];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setDisplayWhosTurn(info) {\r\n        info = \"&nbsp;\" + info + \"&nbsp;\";\r\n        document.getElementById(\"turn-info\").innerHTML = \"<span>\" + info + \"</span>turn\";\r\n    }\r\n\r\n    setDisplayWhosWon(winner, csList) {\r\n        winner = \"&nbsp;\" + winner + \"&nbsp;\";\r\n        let statement = \"<span>\" + winner + \"</span>wins!\";\r\n        if (winner.indexOf(\"you\") != -1) statement = \"<span>\" + winner + \"</span> win!\";\r\n        if (csList == null) {\r\n            document.getElementById(\"turn-info\").innerHTML = statement.substr(0, statement.length - 5);\r\n            return;\r\n        }\r\n        document.getElementById(\"turn-info\").innerHTML = statement;\r\n        let ctx = document.querySelector(\"#gamecanvas\").getContext(\"2d\");\r\n        ctx.lineWidth = (15 / this.size);\r\n        ctx.strokeStyle = 'red';\r\n        for (let i = 0; i < csList.length; i++) {\r\n            let ccs = csList[i].getSelection();\r\n            let coord1 = ccs.getCoord1(), coord2 = ccs.getCoord2();\r\n            ctx.beginPath();\r\n            ctx.moveTo(coord1.getX(), coord1.getY());\r\n            ctx.lineTo(coord2.getX(), coord1.getY());\r\n            ctx.lineTo(coord2.getX(), coord2.getY());\r\n            ctx.lineTo(coord1.getX(), coord2.getY());\r\n            ctx.lineTo(coord1.getX(), coord1.getY());\r\n            ctx.stroke();\r\n        }\r\n        ctx.lineWidth = (40 / this.size);\r\n        ctx.strokeStyle = 'black';\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './Game';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.gameInstance = null;\n    this.state = { inProgress: false }\n    this.hideToggle = this.hideToggle.bind(this);\n    this.backToMenu = this.backToMenu.bind(this);\n    this.difficulty = \"Medium\";\n    this.gridSize = 3;\n  }\n\n  render() {\n    if (this.state.inProgress) {\n      let selectBoxGrid = document.getElementById(\"gridsize\").getElementsByTagName(\"select\")[0];\n      let selectBoxDifficulty = document.getElementById(\"aidifficulty\").getElementsByTagName(\"select\")[0];\n      this.difficulty = selectBoxDifficulty.options[selectBoxDifficulty.selectedIndex].value;\n      let size = selectBoxGrid.options[selectBoxGrid.selectedIndex].value;\n      this.gridSize = parseInt(size.substr(0, 1));\n\n      return (\n        <div id=\"wrapper\">\n        <div id=\"game-wrapper\">\n          <div id=\"header\">\n            <p>TicTacToe</p>\n          </div>\n          <div id=\"menubtnwrapper\">\n          <button id=\"menubtn\" onClick={this.backToMenu}>Back to Menu</button>\n          </div>\n          <div id=\"canvas-wrapper\">\n            <canvas id=\"gamecanvas\" height=\"500px\" width=\"500px\"></canvas>\n          </div>\n          <p id=\"turn-info\"></p>\n          <p id=\"difficulty-info\"></p>\n        </div>\n        </div>\n      );\n    } else {\n      return (\n        <div id=\"wrapper\">\n          <div id=\"header\">\n            <p>TicTacToe</p>\n          </div>\n          <div id=\"options\" style={{ width: '800px', margin: '0 auto' }}>\n            <div id=\"gridsize\">\n              <h1>Grid Size</h1>\n              <select>\n                <option>3x3 - Classic</option>\n                <option>6x6 - 5-in-a-row</option>\n                <option>9x9 - 5-in-a-row</option>\n              </select>\n            </div>\n            <div id=\"aidifficulty\">\n              <h1>AI Difficulty</h1>\n              <select>\n                <option>Easy</option>\n                <option>Medium</option>\n                <option>Hard</option>\n                <option>Impossible</option>\n              </select>\n            </div>\n            <button id=\"startbtn\" onClick={this.hideToggle}>Start</button>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  componentDidUpdate() {\n    if(this.state.inProgress) {\n      this.gameInstance = new Game(this.gridSize, this.difficulty);\n      let difficulty = document.getElementById(\"difficulty-info\");\n      difficulty.innerText = this.difficulty;\n      let color = \"green\";\n      switch(this.difficulty) {\n        case \"Medium\":\n          color = \"orange\"\n          break;\n        case \"Hard\":\n          color = \"firebrick\"\n          break;\n        case \"Impossible\":\n          color = \"red\";\n          break;\n        default:\n           break;\n      }\n      difficulty.style.color = color;\n      this.gameInstance.draw();\n    }\n  }\n\n  hideToggle() {\n    this.setState({ inProgress: true });\n  }\n\n  backToMenu() {\n    this.gameInstance = null;\n    this.setState({ inProgress: false });\n  }\n\n  getGameInstance() {\n    return this.gameInstance;\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}